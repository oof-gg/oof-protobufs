name: Run Tests, Build protobufs for Python, TypeScript, and Go

on:
  push:
    branches:
      - 'main'
      - 'dev'
  pull_request:
    branches:
      - main     # Run on pull requests targeting the main branch
      - dev     # Run on pull requests targeting the dev branch

jobs:
  build_protos_ts:
    # This job builds the protobufs for Python, TypeScript, and Go
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]  # Using Node.js version 22
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Update apt repositories
        run: |
          sudo add-apt-repository universe
          sudo apt-get update

      - name: Install protoc
        run: |
          sudo apt-get install -y protobuf-compiler

      - name: Install protoc-gen-js
        run: |
          npm install -g protoc-gen-js

      - name: Install protoc-gen-grpc-web
        run: |
          npm install -g protoc-gen-grpc-web

      - name: Add node_modules/.bin to PATH
        run: |
          echo "$HOME/.npm-global/bin" >> $GITHUB_PATH


      - name: Build TypeScript protobufs
        run: |
          cd protobuf
          echo "Installing npm dependencies..."
          npm install || { echo "npm install failed"; exit 1; }
          echo "Compiling TypeScript protobufs..."
          npm run compile-ts || { echo "npm run compile-ts failed"; exit 1; }
          npm run compile-ts-web || { echo "npm run compile-ts failed"; exit 1; }

      - name: Upload Protobuf Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compiled-protos
          path: generated  # Path to the built files

  build_protos_go:
    # This job builds the protobufs for Go
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]  # Using Node.js version 22
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Update apt repositories
        run: |
          sudo add-apt-repository universe
          sudo apt-get update

      - name: Install protoc
        run: |
          sudo apt-get install -y protobuf-compiler

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22'

      - name: Install Go protobuf tools
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          export PATH=$PATH:$(go env GOPATH)/bin

      - name: Build Golang protobufs
        run: |
          cd protobuf
          echo "Installing npm dependencies..."
          npm install || { echo "npm install failed"; exit 1; }
          echo "Compiling Golang protobufs..."
          npm run compile-go || { echo "npm run compile-go failed"; exit 1; }
      
      - name: Build Golang code
        run: |
          cd generated/go/v1
          go build ./...

      - name: Upload Protobuf Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compiled-protos-go
          path: generated  # Path to the built files

  run_tests_ts:
    # This job runs tests for the Python, TypeScript, and Go code
    runs-on: ubuntu-latest
    needs: build_protos_ts
    strategy:
      matrix:
        node-version: [22.x]  # Using Node.js version 22
    steps:
      - name: Download Protobuf Artifacts
        uses: actions/download-artifact@v3
        with:
          name: compiled-protos

      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run TypeScript tests
        run: |
          npm install @bufbuild/protobuf
          npm install tsconfig-paths
          echo "Current directory:"
          ls -l
          echo "Changing to tests/node directory..."
          cd tests/node
          echo "Installing npm dependencies..."
          npm install --include=dev || { echo "npm install --include=dev failed"; exit 1; }
          echo "Installing @bufbuild/protobuf..."
          echo "Running TypeScript tests..."
          npm run test

  # run_tests_go:
  #   # This job runs tests for the Python, TypeScript, and Go code
  #   runs-on: ubuntu-latest
  #   needs: build_protos_ts
  #   strategy:
  #     matrix:
  #       go-version: [1.17]  # Using Go version 1.17
  #   steps:
  #     - name: Download Protobuf Artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: compiled-protos

  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ${{ matrix.go-version }}

  #     - name: Run Go tests
  #       run: |
  #         echo "Current directory:"
  #         ls -l
  #         echo "Changing to tests/go directory..."
  #         cd tests/go
  #         echo "Running Go tests..."
  #         go test ./...

  build_npm:
    # This job builds the npm package
    runs-on: ubuntu-latest
    needs: [build_protos_ts, run_tests_ts]
    if: github.ref == 'refs/heads/main'  # Only run on the main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          git pull
          cd generated/typescript
          echo "Installing npm dependencies..."
          npm ci
          npm install --save
          npm run build
          git config user.email "brian@oof.gg"
          git config user.name "Brian S."
          echo "Bumping the version (choose one of patch, minor, or major)"
          NEW_VERSION=$(npm version patch -m "ci: bump version to %s")
          
          echo "Committing the new version and pushing to GitHub..."
          git add dist package.json package-lock.json
          git commit -m "ci: bump version to $NEW_VERSION"
          git push --follow-tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        run: |
          cd generated/typescript
          ls -l
          echo "Publishing to npm..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  build_npm_web:
  # This job builds the npm package
    runs-on: ubuntu-latest
    needs: [build_protos_ts, run_tests_ts]
    if: github.ref == 'refs/heads/main'  # Only run on the main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: |
          git pull
          cd generated/typescript_web
          echo "Installing npm dependencies..."
          npm ci
          npm install --save
          npm run build
          git config user.email "brian@oof.gg"
          git config user.name "Brian S."
          echo "Bumping the version (choose one of patch, minor, or major)"
          NEW_VERSION=$(npm version patch -m "ci: bump version to %s")
          
          echo "Committing the new version and pushing to GitHub..."
          git add dist package.json package-lock.json
          git commit -m "ci: bump version to $NEW_VERSION"
          git push --follow-tags

      - name: Publish to npm
        run: |
          cd generated/typescript_web
          ls -l
          echo "Publishing to npm..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  auto_tag_release:
    runs-on: ubuntu-latest
    needs: [build_npm, build_npm_web]
    if: github.ref == 'refs/heads/main'  # Only run on the main branch
    steps:
      - name: Check out the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag by date
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      - name: Calculate the next tag version
        id: calc_new_version
        run: |
          # Parse the latest tag to increment the patch version
          LATEST_TAG=${{ env.latest_tag }}

          # Remove the "v" prefix and split into major, minor, and patch
          VERSION_NUMBER=${LATEST_TAG#v}
          MAJOR=$(echo "$VERSION_NUMBER" | cut -d. -f1)
          MINOR=$(echo "$VERSION_NUMBER" | cut -d. -f2)
          PATCH=$(echo "$VERSION_NUMBER" | cut -d. -f3)

          # Increment the patch version (or change logic for major/minor if needed)
          NEW_TAG="v$MAJOR.$MINOR.$((PATCH + 1))"
          
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

      - name: Create a new tag
        run: |
          NEW_TAG=${{ env.new_tag }}
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG=${{ env.latest_tag }}
          NEW_TAG=${{ env.new_tag }}
          
          # Generate the changelog between the last and new tag
          if [ "$LATEST_TAG" != "v0.0.0" ]; then
            git log "$LATEST_TAG".."$NEW_TAG" --oneline > changelog.txt
          else
            git log --oneline > changelog.txt  # First release case
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: "Release ${{ env.new_tag }}"
          body_path: ./changelog.txt  # Read changelog directly from file
          draft: false
          prerelease: false