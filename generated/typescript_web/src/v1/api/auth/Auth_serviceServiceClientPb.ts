/**
 * @fileoverview gRPC-Web generated client stub for v1.api.auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.14.0
// source: v1/api/auth/auth_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as v1_api_auth_auth_service_pb from '../../../v1/api/auth/auth_service_pb'; // proto import: "v1/api/auth/auth_service.proto"


export class AuthServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/v1.api.auth.AuthService/Login',
    grpcWeb.MethodType.UNARY,
    v1_api_auth_auth_service_pb.LoginRequest,
    v1_api_auth_auth_service_pb.LoginResponse,
    (request: v1_api_auth_auth_service_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    v1_api_auth_auth_service_pb.LoginResponse.deserializeBinary
  );

  login(
    request: v1_api_auth_auth_service_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<v1_api_auth_auth_service_pb.LoginResponse>;

  login(
    request: v1_api_auth_auth_service_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: v1_api_auth_auth_service_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<v1_api_auth_auth_service_pb.LoginResponse>;

  login(
    request: v1_api_auth_auth_service_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: v1_api_auth_auth_service_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/v1.api.auth.AuthService/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/v1.api.auth.AuthService/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

  methodDescriptorRegister = new grpcWeb.MethodDescriptor(
    '/v1.api.auth.AuthService/Register',
    grpcWeb.MethodType.UNARY,
    v1_api_auth_auth_service_pb.RegisterRequest,
    v1_api_auth_auth_service_pb.RegisterResponse,
    (request: v1_api_auth_auth_service_pb.RegisterRequest) => {
      return request.serializeBinary();
    },
    v1_api_auth_auth_service_pb.RegisterResponse.deserializeBinary
  );

  register(
    request: v1_api_auth_auth_service_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null): Promise<v1_api_auth_auth_service_pb.RegisterResponse>;

  register(
    request: v1_api_auth_auth_service_pb.RegisterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: v1_api_auth_auth_service_pb.RegisterResponse) => void): grpcWeb.ClientReadableStream<v1_api_auth_auth_service_pb.RegisterResponse>;

  register(
    request: v1_api_auth_auth_service_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: v1_api_auth_auth_service_pb.RegisterResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/v1.api.auth.AuthService/Register',
        request,
        metadata || {},
        this.methodDescriptorRegister,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/v1.api.auth.AuthService/Register',
    request,
    metadata || {},
    this.methodDescriptorRegister);
  }

  methodDescriptorValidateToken = new grpcWeb.MethodDescriptor(
    '/v1.api.auth.AuthService/ValidateToken',
    grpcWeb.MethodType.UNARY,
    v1_api_auth_auth_service_pb.ValidateTokenRequest,
    v1_api_auth_auth_service_pb.ValidateTokenResponse,
    (request: v1_api_auth_auth_service_pb.ValidateTokenRequest) => {
      return request.serializeBinary();
    },
    v1_api_auth_auth_service_pb.ValidateTokenResponse.deserializeBinary
  );

  validateToken(
    request: v1_api_auth_auth_service_pb.ValidateTokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<v1_api_auth_auth_service_pb.ValidateTokenResponse>;

  validateToken(
    request: v1_api_auth_auth_service_pb.ValidateTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: v1_api_auth_auth_service_pb.ValidateTokenResponse) => void): grpcWeb.ClientReadableStream<v1_api_auth_auth_service_pb.ValidateTokenResponse>;

  validateToken(
    request: v1_api_auth_auth_service_pb.ValidateTokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: v1_api_auth_auth_service_pb.ValidateTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/v1.api.auth.AuthService/ValidateToken',
        request,
        metadata || {},
        this.methodDescriptorValidateToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/v1.api.auth.AuthService/ValidateToken',
    request,
    metadata || {},
    this.methodDescriptorValidateToken);
  }

  methodDescriptorTwitchLogin = new grpcWeb.MethodDescriptor(
    '/v1.api.auth.AuthService/TwitchLogin',
    grpcWeb.MethodType.UNARY,
    v1_api_auth_auth_service_pb.TwitchLoginRequest,
    v1_api_auth_auth_service_pb.LoginResponse,
    (request: v1_api_auth_auth_service_pb.TwitchLoginRequest) => {
      return request.serializeBinary();
    },
    v1_api_auth_auth_service_pb.LoginResponse.deserializeBinary
  );

  twitchLogin(
    request: v1_api_auth_auth_service_pb.TwitchLoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<v1_api_auth_auth_service_pb.LoginResponse>;

  twitchLogin(
    request: v1_api_auth_auth_service_pb.TwitchLoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: v1_api_auth_auth_service_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<v1_api_auth_auth_service_pb.LoginResponse>;

  twitchLogin(
    request: v1_api_auth_auth_service_pb.TwitchLoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: v1_api_auth_auth_service_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/v1.api.auth.AuthService/TwitchLogin',
        request,
        metadata || {},
        this.methodDescriptorTwitchLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/v1.api.auth.AuthService/TwitchLogin',
    request,
    metadata || {},
    this.methodDescriptorTwitchLogin);
  }

  methodDescriptorRefreshToken = new grpcWeb.MethodDescriptor(
    '/v1.api.auth.AuthService/RefreshToken',
    grpcWeb.MethodType.UNARY,
    v1_api_auth_auth_service_pb.RefreshTokenRequest,
    v1_api_auth_auth_service_pb.RefreshTokenResponse,
    (request: v1_api_auth_auth_service_pb.RefreshTokenRequest) => {
      return request.serializeBinary();
    },
    v1_api_auth_auth_service_pb.RefreshTokenResponse.deserializeBinary
  );

  refreshToken(
    request: v1_api_auth_auth_service_pb.RefreshTokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<v1_api_auth_auth_service_pb.RefreshTokenResponse>;

  refreshToken(
    request: v1_api_auth_auth_service_pb.RefreshTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: v1_api_auth_auth_service_pb.RefreshTokenResponse) => void): grpcWeb.ClientReadableStream<v1_api_auth_auth_service_pb.RefreshTokenResponse>;

  refreshToken(
    request: v1_api_auth_auth_service_pb.RefreshTokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: v1_api_auth_auth_service_pb.RefreshTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/v1.api.auth.AuthService/RefreshToken',
        request,
        metadata || {},
        this.methodDescriptorRefreshToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/v1.api.auth.AuthService/RefreshToken',
    request,
    metadata || {},
    this.methodDescriptorRefreshToken);
  }

}

