"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for v1.api.common
 * @enhanceable
 * @public
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameServiceClient = void 0;
// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.14.0
// source: v1/api/common/game_service.proto
/* eslint-disable */
// @ts-nocheck
const grpcWeb = require("grpc-web");
const v1_api_game_entity_pb = require("../../../v1/api/game/entity_pb"); // proto import: "v1/api/game/entity.proto"
const v1_api_game_game_pb = require("../../../v1/api/game/game_pb"); // proto import: "v1/api/game/game.proto"
const v1_api_game_join_leave_pb = require("../../../v1/api/game/join_leave_pb"); // proto import: "v1/api/game/join_leave.proto"
const v1_api_game_session_pb = require("../../../v1/api/game/session_pb"); // proto import: "v1/api/game/session.proto"
class GameServiceClient {
    constructor(hostname, credentials, options) {
        this.methodDescriptorJoinLeave = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/JoinLeave', grpcWeb.MethodType.UNARY, v1_api_game_join_leave_pb.JoinLeaveGame, v1_api_game_game_pb.StandardResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.StandardResponse.deserializeBinary);
        this.methodDescriptorCreateSession = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/CreateSession', grpcWeb.MethodType.UNARY, v1_api_game_session_pb.SessionCreate, v1_api_game_game_pb.StandardResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.StandardResponse.deserializeBinary);
        this.methodDescriptorGetSession = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/GetSession', grpcWeb.MethodType.UNARY, v1_api_game_session_pb.SessionGet, v1_api_game_game_pb.StandardResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.StandardResponse.deserializeBinary);
        this.methodDescriptorUpdateSession = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/UpdateSession', grpcWeb.MethodType.UNARY, v1_api_game_session_pb.SessionUpdate, v1_api_game_game_pb.StandardResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.StandardResponse.deserializeBinary);
        this.methodDescriptorDeleteSession = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/DeleteSession', grpcWeb.MethodType.UNARY, v1_api_game_session_pb.SessionDelete, v1_api_game_game_pb.StandardResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.StandardResponse.deserializeBinary);
        this.methodDescriptorCreateEntity = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/CreateEntity', grpcWeb.MethodType.UNARY, v1_api_game_entity_pb.EntityCreateRequest, v1_api_game_game_pb.StandardResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.StandardResponse.deserializeBinary);
        this.methodDescriptorGetEntity = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/GetEntity', grpcWeb.MethodType.UNARY, v1_api_game_entity_pb.EntityGetRequest, v1_api_game_game_pb.PaginatedResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.PaginatedResponse.deserializeBinary);
        this.methodDescriptorUpdateEntity = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/UpdateEntity', grpcWeb.MethodType.UNARY, v1_api_game_entity_pb.EntityUpdateRequest, v1_api_game_game_pb.StandardResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.StandardResponse.deserializeBinary);
        this.methodDescriptorDeleteEntity = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/DeleteEntity', grpcWeb.MethodType.UNARY, v1_api_game_entity_pb.EntityDeleteRequest, v1_api_game_game_pb.StandardResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.StandardResponse.deserializeBinary);
        this.methodDescriptorCreateGame = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/CreateGame', grpcWeb.MethodType.UNARY, v1_api_game_game_pb.GameCreateRequest, v1_api_game_game_pb.StandardResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.StandardResponse.deserializeBinary);
        this.methodDescriptorGetGame = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/GetGame', grpcWeb.MethodType.UNARY, v1_api_game_game_pb.GameGetRequest, v1_api_game_game_pb.PaginatedResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.PaginatedResponse.deserializeBinary);
        this.methodDescriptorUpdateGame = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/UpdateGame', grpcWeb.MethodType.UNARY, v1_api_game_game_pb.GameUpdateRequest, v1_api_game_game_pb.StandardResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.StandardResponse.deserializeBinary);
        this.methodDescriptorTrendingGame = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/TrendingGame', grpcWeb.MethodType.UNARY, v1_api_game_game_pb.TrendingGamesRequest, v1_api_game_game_pb.PaginatedResponse, (request) => {
            return request.serializeBinary();
        }, v1_api_game_game_pb.PaginatedResponse.deserializeBinary);
        this.methodDescriptorWatchQueue = new grpcWeb.MethodDescriptor('/v1.api.common.GameService/WatchQueue', grpcWeb.MethodType.SERVER_STREAMING, v1_api_game_session_pb.Session, v1_api_game_session_pb.Session, (request) => {
            return request.serializeBinary();
        }, v1_api_game_session_pb.Session.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname.replace(/\/+$/, '');
        this.credentials_ = credentials;
        this.options_ = options;
    }
    joinLeave(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/JoinLeave', request, metadata || {}, this.methodDescriptorJoinLeave, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/JoinLeave', request, metadata || {}, this.methodDescriptorJoinLeave);
    }
    createSession(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/CreateSession', request, metadata || {}, this.methodDescriptorCreateSession, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/CreateSession', request, metadata || {}, this.methodDescriptorCreateSession);
    }
    getSession(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/GetSession', request, metadata || {}, this.methodDescriptorGetSession, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/GetSession', request, metadata || {}, this.methodDescriptorGetSession);
    }
    updateSession(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/UpdateSession', request, metadata || {}, this.methodDescriptorUpdateSession, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/UpdateSession', request, metadata || {}, this.methodDescriptorUpdateSession);
    }
    deleteSession(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/DeleteSession', request, metadata || {}, this.methodDescriptorDeleteSession, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/DeleteSession', request, metadata || {}, this.methodDescriptorDeleteSession);
    }
    createEntity(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/CreateEntity', request, metadata || {}, this.methodDescriptorCreateEntity, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/CreateEntity', request, metadata || {}, this.methodDescriptorCreateEntity);
    }
    getEntity(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/GetEntity', request, metadata || {}, this.methodDescriptorGetEntity, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/GetEntity', request, metadata || {}, this.methodDescriptorGetEntity);
    }
    updateEntity(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/UpdateEntity', request, metadata || {}, this.methodDescriptorUpdateEntity, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/UpdateEntity', request, metadata || {}, this.methodDescriptorUpdateEntity);
    }
    deleteEntity(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/DeleteEntity', request, metadata || {}, this.methodDescriptorDeleteEntity, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/DeleteEntity', request, metadata || {}, this.methodDescriptorDeleteEntity);
    }
    createGame(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/CreateGame', request, metadata || {}, this.methodDescriptorCreateGame, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/CreateGame', request, metadata || {}, this.methodDescriptorCreateGame);
    }
    getGame(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/GetGame', request, metadata || {}, this.methodDescriptorGetGame, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/GetGame', request, metadata || {}, this.methodDescriptorGetGame);
    }
    updateGame(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/UpdateGame', request, metadata || {}, this.methodDescriptorUpdateGame, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/UpdateGame', request, metadata || {}, this.methodDescriptorUpdateGame);
    }
    trendingGame(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/v1.api.common.GameService/TrendingGame', request, metadata || {}, this.methodDescriptorTrendingGame, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/v1.api.common.GameService/TrendingGame', request, metadata || {}, this.methodDescriptorTrendingGame);
    }
    watchQueue(request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/v1.api.common.GameService/WatchQueue', request, metadata || {}, this.methodDescriptorWatchQueue);
    }
}
exports.GameServiceClient = GameServiceClient;
