// source: v1/api/global/event.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.v1.api.global.GlobalEvent', null, global);
goog.exportSymbol('proto.v1.api.global.GlobalEvent.EventAttribute', null, global);
goog.exportSymbol('proto.v1.api.global.GlobalEvent.EventAttribute.ValueCase', null, global);
goog.exportSymbol('proto.v1.api.global.GlobalEvent.EventType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.api.global.GlobalEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.api.global.GlobalEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.api.global.GlobalEvent.displayName = 'proto.v1.api.global.GlobalEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.api.global.GlobalEvent.EventAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_);
};
goog.inherits(proto.v1.api.global.GlobalEvent.EventAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.api.global.GlobalEvent.EventAttribute.displayName = 'proto.v1.api.global.GlobalEvent.EventAttribute';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.api.global.GlobalEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.api.global.GlobalEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.api.global.GlobalEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.global.GlobalEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    teamId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, proto.v1.api.global.GlobalEvent.EventAttribute.toObject) : [],
    type: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.api.global.GlobalEvent}
 */
proto.v1.api.global.GlobalEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.api.global.GlobalEvent;
  return proto.v1.api.global.GlobalEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.api.global.GlobalEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.api.global.GlobalEvent}
 */
proto.v1.api.global.GlobalEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamId(value);
      break;
    case 7:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.v1.api.global.GlobalEvent.EventAttribute.deserializeBinaryFromReader, "", new proto.v1.api.global.GlobalEvent.EventAttribute());
         });
      break;
    case 8:
      var value = /** @type {!proto.v1.api.global.GlobalEvent.EventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.api.global.GlobalEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.api.global.GlobalEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.api.global.GlobalEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.global.GlobalEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.v1.api.global.GlobalEvent.EventAttribute.serializeBinaryToWriter);
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.v1.api.global.GlobalEvent.EventType = {
  CUSTOM: 0,
  ANNOUNCEMENT: 1,
  ALERT: 2,
  EVENT: 3,
  REQUEST: 4
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 1,
  INT_VALUE: 2,
  FLOAT_VALUE: 3,
  BOOL_VALUE: 4
};

/**
 * @return {proto.v1.api.global.GlobalEvent.EventAttribute.ValueCase}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.getValueCase = function() {
  return /** @type {proto.v1.api.global.GlobalEvent.EventAttribute.ValueCase} */(jspb.Message.computeOneofCase(this, proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.api.global.GlobalEvent.EventAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.api.global.GlobalEvent.EventAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.global.GlobalEvent.EventAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringValue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    intValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    floatValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.api.global.GlobalEvent.EventAttribute}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.api.global.GlobalEvent.EventAttribute;
  return proto.v1.api.global.GlobalEvent.EventAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.api.global.GlobalEvent.EventAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.api.global.GlobalEvent.EventAttribute}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatValue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.api.global.GlobalEvent.EventAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.api.global.GlobalEvent.EventAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.global.GlobalEvent.EventAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string string_value = 1;
 * @return {string}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.global.GlobalEvent.EventAttribute} returns this
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.global.GlobalEvent.EventAttribute} returns this
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 int_value = 2;
 * @return {number}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.api.global.GlobalEvent.EventAttribute} returns this
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.global.GlobalEvent.EventAttribute} returns this
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float float_value = 3;
 * @return {number}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.getFloatValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.v1.api.global.GlobalEvent.EventAttribute} returns this
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.setFloatValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.global.GlobalEvent.EventAttribute} returns this
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.clearFloatValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.hasFloatValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_value = 4;
 * @return {boolean}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.api.global.GlobalEvent.EventAttribute} returns this
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.global.GlobalEvent.EventAttribute} returns this
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 4, proto.v1.api.global.GlobalEvent.EventAttribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.global.GlobalEvent.EventAttribute.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.v1.api.global.GlobalEvent.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string event_name = 2;
 * @return {string}
 */
proto.v1.api.global.GlobalEvent.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.v1.api.global.GlobalEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string game_id = 4;
 * @return {string}
 */
proto.v1.api.global.GlobalEvent.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.setGameId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.clearGameId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.global.GlobalEvent.prototype.hasGameId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string player_id = 5;
 * @return {string}
 */
proto.v1.api.global.GlobalEvent.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.setPlayerId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.clearPlayerId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.global.GlobalEvent.prototype.hasPlayerId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string team_id = 6;
 * @return {string}
 */
proto.v1.api.global.GlobalEvent.prototype.getTeamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.setTeamId = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.clearTeamId = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.global.GlobalEvent.prototype.hasTeamId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * map<string, EventAttribute> attributes = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.v1.api.global.GlobalEvent.EventAttribute>}
 */
proto.v1.api.global.GlobalEvent.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.v1.api.global.GlobalEvent.EventAttribute>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.v1.api.global.GlobalEvent.EventAttribute));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};


/**
 * optional EventType type = 8;
 * @return {!proto.v1.api.global.GlobalEvent.EventType}
 */
proto.v1.api.global.GlobalEvent.prototype.getType = function() {
  return /** @type {!proto.v1.api.global.GlobalEvent.EventType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.v1.api.global.GlobalEvent.EventType} value
 * @return {!proto.v1.api.global.GlobalEvent} returns this
 */
proto.v1.api.global.GlobalEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


goog.object.extend(exports, proto.v1.api.global);
