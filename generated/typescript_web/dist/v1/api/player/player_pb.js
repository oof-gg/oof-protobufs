// source: v1/api/player/player.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.v1.api.player.Player', null, global);
goog.exportSymbol('proto.v1.api.player.PlayerCreate', null, global);
goog.exportSymbol('proto.v1.api.player.PlayerGet', null, global);
goog.exportSymbol('proto.v1.api.player.PlayerStatus', null, global);
goog.exportSymbol('proto.v1.api.player.PlayerType', null, global);
goog.exportSymbol('proto.v1.api.player.PlayerUpdate', null, global);
goog.exportSymbol('proto.v1.api.player.Players', null, global);
goog.exportSymbol('proto.v1.api.player.StandardResponse', null, global);
goog.exportSymbol('proto.v1.api.player.StandardResponse.DataCase', null, global);
goog.exportSymbol('proto.v1.api.player.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.api.player.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.api.player.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.api.player.Player.displayName = 'proto.v1.api.player.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.api.player.PlayerCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.api.player.PlayerCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.api.player.PlayerCreate.displayName = 'proto.v1.api.player.PlayerCreate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.api.player.PlayerUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.api.player.PlayerUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.api.player.PlayerUpdate.displayName = 'proto.v1.api.player.PlayerUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.api.player.PlayerGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.api.player.PlayerGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.api.player.PlayerGet.displayName = 'proto.v1.api.player.PlayerGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.api.player.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.api.player.Status.repeatedFields_, null);
};
goog.inherits(proto.v1.api.player.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.api.player.Status.displayName = 'proto.v1.api.player.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.api.player.StandardResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.v1.api.player.StandardResponse.oneofGroups_);
};
goog.inherits(proto.v1.api.player.StandardResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.api.player.StandardResponse.displayName = 'proto.v1.api.player.StandardResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.api.player.Players = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.api.player.Players.repeatedFields_, null);
};
goog.inherits(proto.v1.api.player.Players, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.api.player.Players.displayName = 'proto.v1.api.player.Players';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.api.player.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.api.player.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.api.player.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    team: jspb.Message.getFieldWithDefault(msg, 4, ""),
    score: jspb.Message.getFieldWithDefault(msg, 5, 0),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    role: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.api.player.Player}
 */
proto.v1.api.player.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.api.player.Player;
  return proto.v1.api.player.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.api.player.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.api.player.Player}
 */
proto.v1.api.player.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeam(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 6:
      var value = /** @type {!proto.v1.api.player.PlayerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {!proto.v1.api.player.PlayerStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.api.player.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.api.player.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.api.player.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.v1.api.player.Player.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.v1.api.player.Player.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.v1.api.player.Player.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.setEmail = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.clearEmail = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.Player.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string team = 4;
 * @return {string}
 */
proto.v1.api.player.Player.prototype.getTeam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.setTeam = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.clearTeam = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.Player.prototype.hasTeam = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 score = 5;
 * @return {number}
 */
proto.v1.api.player.Player.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional PlayerType type = 6;
 * @return {!proto.v1.api.player.PlayerType}
 */
proto.v1.api.player.Player.prototype.getType = function() {
  return /** @type {!proto.v1.api.player.PlayerType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.v1.api.player.PlayerType} value
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional PlayerStatus status = 7;
 * @return {!proto.v1.api.player.PlayerStatus}
 */
proto.v1.api.player.Player.prototype.getStatus = function() {
  return /** @type {!proto.v1.api.player.PlayerStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.v1.api.player.PlayerStatus} value
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string role = 8;
 * @return {string}
 */
proto.v1.api.player.Player.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.setRole = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.Player} returns this
 */
proto.v1.api.player.Player.prototype.clearRole = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.Player.prototype.hasRole = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.api.player.PlayerCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.api.player.PlayerCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.api.player.PlayerCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.PlayerCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    team: jspb.Message.getFieldWithDefault(msg, 3, ""),
    score: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0),
    role: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.api.player.PlayerCreate}
 */
proto.v1.api.player.PlayerCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.api.player.PlayerCreate;
  return proto.v1.api.player.PlayerCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.api.player.PlayerCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.api.player.PlayerCreate}
 */
proto.v1.api.player.PlayerCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeam(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 5:
      var value = /** @type {!proto.v1.api.player.PlayerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {!proto.v1.api.player.PlayerStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.api.player.PlayerCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.api.player.PlayerCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.api.player.PlayerCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.PlayerCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.v1.api.player.PlayerCreate.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.PlayerCreate} returns this
 */
proto.v1.api.player.PlayerCreate.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.v1.api.player.PlayerCreate.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.PlayerCreate} returns this
 */
proto.v1.api.player.PlayerCreate.prototype.setEmail = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.PlayerCreate} returns this
 */
proto.v1.api.player.PlayerCreate.prototype.clearEmail = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.PlayerCreate.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string team = 3;
 * @return {string}
 */
proto.v1.api.player.PlayerCreate.prototype.getTeam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.PlayerCreate} returns this
 */
proto.v1.api.player.PlayerCreate.prototype.setTeam = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.PlayerCreate} returns this
 */
proto.v1.api.player.PlayerCreate.prototype.clearTeam = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.PlayerCreate.prototype.hasTeam = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 score = 4;
 * @return {number}
 */
proto.v1.api.player.PlayerCreate.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.api.player.PlayerCreate} returns this
 */
proto.v1.api.player.PlayerCreate.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional PlayerType type = 5;
 * @return {!proto.v1.api.player.PlayerType}
 */
proto.v1.api.player.PlayerCreate.prototype.getType = function() {
  return /** @type {!proto.v1.api.player.PlayerType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.v1.api.player.PlayerType} value
 * @return {!proto.v1.api.player.PlayerCreate} returns this
 */
proto.v1.api.player.PlayerCreate.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional PlayerStatus status = 6;
 * @return {!proto.v1.api.player.PlayerStatus}
 */
proto.v1.api.player.PlayerCreate.prototype.getStatus = function() {
  return /** @type {!proto.v1.api.player.PlayerStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.v1.api.player.PlayerStatus} value
 * @return {!proto.v1.api.player.PlayerCreate} returns this
 */
proto.v1.api.player.PlayerCreate.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string role = 7;
 * @return {string}
 */
proto.v1.api.player.PlayerCreate.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.PlayerCreate} returns this
 */
proto.v1.api.player.PlayerCreate.prototype.setRole = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.PlayerCreate} returns this
 */
proto.v1.api.player.PlayerCreate.prototype.clearRole = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.PlayerCreate.prototype.hasRole = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.api.player.PlayerUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.api.player.PlayerUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.api.player.PlayerUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.PlayerUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    team: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    role: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.api.player.PlayerUpdate}
 */
proto.v1.api.player.PlayerUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.api.player.PlayerUpdate;
  return proto.v1.api.player.PlayerUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.api.player.PlayerUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.api.player.PlayerUpdate}
 */
proto.v1.api.player.PlayerUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeam(value);
      break;
    case 6:
      var value = /** @type {!proto.v1.api.player.PlayerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {!proto.v1.api.player.PlayerStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.api.player.PlayerUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.api.player.PlayerUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.api.player.PlayerUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.PlayerUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!proto.v1.api.player.PlayerType} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {!proto.v1.api.player.PlayerStatus} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.v1.api.player.PlayerUpdate.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.PlayerUpdate} returns this
 */
proto.v1.api.player.PlayerUpdate.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string team = 4;
 * @return {string}
 */
proto.v1.api.player.PlayerUpdate.prototype.getTeam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.PlayerUpdate} returns this
 */
proto.v1.api.player.PlayerUpdate.prototype.setTeam = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.PlayerUpdate} returns this
 */
proto.v1.api.player.PlayerUpdate.prototype.clearTeam = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.PlayerUpdate.prototype.hasTeam = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PlayerType type = 6;
 * @return {!proto.v1.api.player.PlayerType}
 */
proto.v1.api.player.PlayerUpdate.prototype.getType = function() {
  return /** @type {!proto.v1.api.player.PlayerType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.v1.api.player.PlayerType} value
 * @return {!proto.v1.api.player.PlayerUpdate} returns this
 */
proto.v1.api.player.PlayerUpdate.prototype.setType = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.PlayerUpdate} returns this
 */
proto.v1.api.player.PlayerUpdate.prototype.clearType = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.PlayerUpdate.prototype.hasType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PlayerStatus status = 7;
 * @return {!proto.v1.api.player.PlayerStatus}
 */
proto.v1.api.player.PlayerUpdate.prototype.getStatus = function() {
  return /** @type {!proto.v1.api.player.PlayerStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.v1.api.player.PlayerStatus} value
 * @return {!proto.v1.api.player.PlayerUpdate} returns this
 */
proto.v1.api.player.PlayerUpdate.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.PlayerUpdate} returns this
 */
proto.v1.api.player.PlayerUpdate.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.PlayerUpdate.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string role = 8;
 * @return {string}
 */
proto.v1.api.player.PlayerUpdate.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.PlayerUpdate} returns this
 */
proto.v1.api.player.PlayerUpdate.prototype.setRole = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.PlayerUpdate} returns this
 */
proto.v1.api.player.PlayerUpdate.prototype.clearRole = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.PlayerUpdate.prototype.hasRole = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.api.player.PlayerGet.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.api.player.PlayerGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.api.player.PlayerGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.PlayerGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.api.player.PlayerGet}
 */
proto.v1.api.player.PlayerGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.api.player.PlayerGet;
  return proto.v1.api.player.PlayerGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.api.player.PlayerGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.api.player.PlayerGet}
 */
proto.v1.api.player.PlayerGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.api.player.PlayerGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.api.player.PlayerGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.api.player.PlayerGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.PlayerGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.v1.api.player.PlayerGet.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.PlayerGet} returns this
 */
proto.v1.api.player.PlayerGet.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.api.player.PlayerGet} returns this
 */
proto.v1.api.player.PlayerGet.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.PlayerGet.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.api.player.Status.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.api.player.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.api.player.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.api.player.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    detailsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.api.player.Status}
 */
proto.v1.api.player.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.api.player.Status;
  return proto.v1.api.player.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.api.player.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.api.player.Status}
 */
proto.v1.api.player.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.api.player.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.api.player.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.api.player.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.v1.api.player.Status.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.api.player.Status} returns this
 */
proto.v1.api.player.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.v1.api.player.Status.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.Status} returns this
 */
proto.v1.api.player.Status.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string details = 3;
 * @return {!Array<string>}
 */
proto.v1.api.player.Status.prototype.getDetailsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.v1.api.player.Status} returns this
 */
proto.v1.api.player.Status.prototype.setDetailsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.v1.api.player.Status} returns this
 */
proto.v1.api.player.Status.prototype.addDetails = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.api.player.Status} returns this
 */
proto.v1.api.player.Status.prototype.clearDetailsList = function() {
  return this.setDetailsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.api.player.StandardResponse.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.v1.api.player.StandardResponse.DataCase = {
  DATA_NOT_SET: 0,
  SINGLE_PLAYER: 4,
  PLAYERS: 5
};

/**
 * @return {proto.v1.api.player.StandardResponse.DataCase}
 */
proto.v1.api.player.StandardResponse.prototype.getDataCase = function() {
  return /** @type {proto.v1.api.player.StandardResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.v1.api.player.StandardResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.api.player.StandardResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.api.player.StandardResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.api.player.StandardResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.StandardResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    error: (f = msg.getError()) && proto.v1.api.player.Status.toObject(includeInstance, f),
    singlePlayer: (f = msg.getSinglePlayer()) && proto.v1.api.player.Player.toObject(includeInstance, f),
    players: (f = msg.getPlayers()) && proto.v1.api.player.Players.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.api.player.StandardResponse}
 */
proto.v1.api.player.StandardResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.api.player.StandardResponse;
  return proto.v1.api.player.StandardResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.api.player.StandardResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.api.player.StandardResponse}
 */
proto.v1.api.player.StandardResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.v1.api.player.Status;
      reader.readMessage(value,proto.v1.api.player.Status.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 4:
      var value = new proto.v1.api.player.Player;
      reader.readMessage(value,proto.v1.api.player.Player.deserializeBinaryFromReader);
      msg.setSinglePlayer(value);
      break;
    case 5:
      var value = new proto.v1.api.player.Players;
      reader.readMessage(value,proto.v1.api.player.Players.deserializeBinaryFromReader);
      msg.setPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.api.player.StandardResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.api.player.StandardResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.api.player.StandardResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.StandardResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.api.player.Status.serializeBinaryToWriter
    );
  }
  f = message.getSinglePlayer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.v1.api.player.Player.serializeBinaryToWriter
    );
  }
  f = message.getPlayers();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.v1.api.player.Players.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.v1.api.player.StandardResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.api.player.StandardResponse} returns this
 */
proto.v1.api.player.StandardResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.v1.api.player.StandardResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.api.player.StandardResponse} returns this
 */
proto.v1.api.player.StandardResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Status error = 3;
 * @return {?proto.v1.api.player.Status}
 */
proto.v1.api.player.StandardResponse.prototype.getError = function() {
  return /** @type{?proto.v1.api.player.Status} */ (
    jspb.Message.getWrapperField(this, proto.v1.api.player.Status, 3));
};


/**
 * @param {?proto.v1.api.player.Status|undefined} value
 * @return {!proto.v1.api.player.StandardResponse} returns this
*/
proto.v1.api.player.StandardResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.api.player.StandardResponse} returns this
 */
proto.v1.api.player.StandardResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.StandardResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Player single_player = 4;
 * @return {?proto.v1.api.player.Player}
 */
proto.v1.api.player.StandardResponse.prototype.getSinglePlayer = function() {
  return /** @type{?proto.v1.api.player.Player} */ (
    jspb.Message.getWrapperField(this, proto.v1.api.player.Player, 4));
};


/**
 * @param {?proto.v1.api.player.Player|undefined} value
 * @return {!proto.v1.api.player.StandardResponse} returns this
*/
proto.v1.api.player.StandardResponse.prototype.setSinglePlayer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.v1.api.player.StandardResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.api.player.StandardResponse} returns this
 */
proto.v1.api.player.StandardResponse.prototype.clearSinglePlayer = function() {
  return this.setSinglePlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.StandardResponse.prototype.hasSinglePlayer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Players players = 5;
 * @return {?proto.v1.api.player.Players}
 */
proto.v1.api.player.StandardResponse.prototype.getPlayers = function() {
  return /** @type{?proto.v1.api.player.Players} */ (
    jspb.Message.getWrapperField(this, proto.v1.api.player.Players, 5));
};


/**
 * @param {?proto.v1.api.player.Players|undefined} value
 * @return {!proto.v1.api.player.StandardResponse} returns this
*/
proto.v1.api.player.StandardResponse.prototype.setPlayers = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.v1.api.player.StandardResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.api.player.StandardResponse} returns this
 */
proto.v1.api.player.StandardResponse.prototype.clearPlayers = function() {
  return this.setPlayers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.api.player.StandardResponse.prototype.hasPlayers = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.api.player.Players.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.api.player.Players.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.api.player.Players.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.api.player.Players} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.Players.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.v1.api.player.Player.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.api.player.Players}
 */
proto.v1.api.player.Players.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.api.player.Players;
  return proto.v1.api.player.Players.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.api.player.Players} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.api.player.Players}
 */
proto.v1.api.player.Players.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.api.player.Player;
      reader.readMessage(value,proto.v1.api.player.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.api.player.Players.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.api.player.Players.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.api.player.Players} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.api.player.Players.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.v1.api.player.Player.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Player players = 1;
 * @return {!Array<!proto.v1.api.player.Player>}
 */
proto.v1.api.player.Players.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.v1.api.player.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.api.player.Player, 1));
};


/**
 * @param {!Array<!proto.v1.api.player.Player>} value
 * @return {!proto.v1.api.player.Players} returns this
*/
proto.v1.api.player.Players.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.v1.api.player.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.api.player.Player}
 */
proto.v1.api.player.Players.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.v1.api.player.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.api.player.Players} returns this
 */
proto.v1.api.player.Players.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * @enum {number}
 */
proto.v1.api.player.PlayerType = {
  HUMAN: 0,
  AI: 1
};

/**
 * @enum {number}
 */
proto.v1.api.player.PlayerStatus = {
  ACTIVE: 0,
  INACTIVE: 1
};

goog.object.extend(exports, proto.v1.api.player);
