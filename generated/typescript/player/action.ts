// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: player/action.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "player";

export interface Action {
  playerId: string;
  sessionId: string;
  gameId: string;
  actionType: Action_ActionType;
  position?: Action_Position | undefined;
  velocity?:
    | Action_Velocity
    | undefined;
  /** Flexible data structure for custom actions */
  action: { [key: string]: Action_PlayerAction };
  timestamp: number;
}

export enum Action_ActionType {
  CUSTOM = 0,
  MOVE = 1,
  JUMP = 2,
  SHOOT = 3,
  PICKUP = 4,
  DROP = 5,
  USE = 6,
  INTERACT = 7,
  UNRECOGNIZED = -1,
}

export function action_ActionTypeFromJSON(object: any): Action_ActionType {
  switch (object) {
    case 0:
    case "CUSTOM":
      return Action_ActionType.CUSTOM;
    case 1:
    case "MOVE":
      return Action_ActionType.MOVE;
    case 2:
    case "JUMP":
      return Action_ActionType.JUMP;
    case 3:
    case "SHOOT":
      return Action_ActionType.SHOOT;
    case 4:
    case "PICKUP":
      return Action_ActionType.PICKUP;
    case 5:
    case "DROP":
      return Action_ActionType.DROP;
    case 6:
    case "USE":
      return Action_ActionType.USE;
    case 7:
    case "INTERACT":
      return Action_ActionType.INTERACT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Action_ActionType.UNRECOGNIZED;
  }
}

export function action_ActionTypeToJSON(object: Action_ActionType): string {
  switch (object) {
    case Action_ActionType.CUSTOM:
      return "CUSTOM";
    case Action_ActionType.MOVE:
      return "MOVE";
    case Action_ActionType.JUMP:
      return "JUMP";
    case Action_ActionType.SHOOT:
      return "SHOOT";
    case Action_ActionType.PICKUP:
      return "PICKUP";
    case Action_ActionType.DROP:
      return "DROP";
    case Action_ActionType.USE:
      return "USE";
    case Action_ActionType.INTERACT:
      return "INTERACT";
    case Action_ActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Action_ActionEntry {
  key: string;
  value: Action_PlayerAction | undefined;
}

export interface Action_Position {
  x: number;
  y: number;
  z: number;
}

export interface Action_Velocity {
  x: number;
  y: number;
  z: number;
}

export interface Action_PlayerAction {
  key: string;
  stringValue?: string | undefined;
  intValue?: number | undefined;
  floatValue?: number | undefined;
  boolValue?: boolean | undefined;
}

function createBaseAction(): Action {
  return {
    playerId: "",
    sessionId: "",
    gameId: "",
    actionType: 0,
    position: undefined,
    velocity: undefined,
    action: {},
    timestamp: 0,
  };
}

export const Action: MessageFns<Action> = {
  encode(message: Action, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.sessionId !== "") {
      writer.uint32(18).string(message.sessionId);
    }
    if (message.gameId !== "") {
      writer.uint32(26).string(message.gameId);
    }
    if (message.actionType !== 0) {
      writer.uint32(32).int32(message.actionType);
    }
    if (message.position !== undefined) {
      Action_Position.encode(message.position, writer.uint32(42).fork()).join();
    }
    if (message.velocity !== undefined) {
      Action_Velocity.encode(message.velocity, writer.uint32(50).fork()).join();
    }
    Object.entries(message.action).forEach(([key, value]) => {
      Action_ActionEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.timestamp !== 0) {
      writer.uint32(64).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Action {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.actionType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.position = Action_Position.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.velocity = Action_Velocity.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = Action_ActionEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.action[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      actionType: isSet(object.actionType) ? action_ActionTypeFromJSON(object.actionType) : 0,
      position: isSet(object.position) ? Action_Position.fromJSON(object.position) : undefined,
      velocity: isSet(object.velocity) ? Action_Velocity.fromJSON(object.velocity) : undefined,
      action: isObject(object.action)
        ? Object.entries(object.action).reduce<{ [key: string]: Action_PlayerAction }>((acc, [key, value]) => {
          acc[key] = Action_PlayerAction.fromJSON(value);
          return acc;
        }, {})
        : {},
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: Action): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.actionType !== 0) {
      obj.actionType = action_ActionTypeToJSON(message.actionType);
    }
    if (message.position !== undefined) {
      obj.position = Action_Position.toJSON(message.position);
    }
    if (message.velocity !== undefined) {
      obj.velocity = Action_Velocity.toJSON(message.velocity);
    }
    if (message.action) {
      const entries = Object.entries(message.action);
      if (entries.length > 0) {
        obj.action = {};
        entries.forEach(([k, v]) => {
          obj.action[k] = Action_PlayerAction.toJSON(v);
        });
      }
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Action>, I>>(base?: I): Action {
    return Action.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Action>, I>>(object: I): Action {
    const message = createBaseAction();
    message.playerId = object.playerId ?? "";
    message.sessionId = object.sessionId ?? "";
    message.gameId = object.gameId ?? "";
    message.actionType = object.actionType ?? 0;
    message.position = (object.position !== undefined && object.position !== null)
      ? Action_Position.fromPartial(object.position)
      : undefined;
    message.velocity = (object.velocity !== undefined && object.velocity !== null)
      ? Action_Velocity.fromPartial(object.velocity)
      : undefined;
    message.action = Object.entries(object.action ?? {}).reduce<{ [key: string]: Action_PlayerAction }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Action_PlayerAction.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBaseAction_ActionEntry(): Action_ActionEntry {
  return { key: "", value: undefined };
}

export const Action_ActionEntry: MessageFns<Action_ActionEntry> = {
  encode(message: Action_ActionEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Action_PlayerAction.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Action_ActionEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction_ActionEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Action_PlayerAction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action_ActionEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Action_PlayerAction.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Action_ActionEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Action_PlayerAction.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Action_ActionEntry>, I>>(base?: I): Action_ActionEntry {
    return Action_ActionEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Action_ActionEntry>, I>>(object: I): Action_ActionEntry {
    const message = createBaseAction_ActionEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Action_PlayerAction.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseAction_Position(): Action_Position {
  return { x: 0, y: 0, z: 0 };
}

export const Action_Position: MessageFns<Action_Position> = {
  encode(message: Action_Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(29).float(message.z);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Action_Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction_Position();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.z = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action_Position {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      z: isSet(object.z) ? globalThis.Number(object.z) : 0,
    };
  },

  toJSON(message: Action_Position): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    if (message.z !== 0) {
      obj.z = message.z;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Action_Position>, I>>(base?: I): Action_Position {
    return Action_Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Action_Position>, I>>(object: I): Action_Position {
    const message = createBaseAction_Position();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.z = object.z ?? 0;
    return message;
  },
};

function createBaseAction_Velocity(): Action_Velocity {
  return { x: 0, y: 0, z: 0 };
}

export const Action_Velocity: MessageFns<Action_Velocity> = {
  encode(message: Action_Velocity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(29).float(message.z);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Action_Velocity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction_Velocity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.z = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action_Velocity {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      z: isSet(object.z) ? globalThis.Number(object.z) : 0,
    };
  },

  toJSON(message: Action_Velocity): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    if (message.z !== 0) {
      obj.z = message.z;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Action_Velocity>, I>>(base?: I): Action_Velocity {
    return Action_Velocity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Action_Velocity>, I>>(object: I): Action_Velocity {
    const message = createBaseAction_Velocity();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.z = object.z ?? 0;
    return message;
  },
};

function createBaseAction_PlayerAction(): Action_PlayerAction {
  return { key: "", stringValue: undefined, intValue: undefined, floatValue: undefined, boolValue: undefined };
}

export const Action_PlayerAction: MessageFns<Action_PlayerAction> = {
  encode(message: Action_PlayerAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.stringValue !== undefined) {
      writer.uint32(18).string(message.stringValue);
    }
    if (message.intValue !== undefined) {
      writer.uint32(24).int32(message.intValue);
    }
    if (message.floatValue !== undefined) {
      writer.uint32(37).float(message.floatValue);
    }
    if (message.boolValue !== undefined) {
      writer.uint32(40).bool(message.boolValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Action_PlayerAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction_PlayerAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.intValue = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.floatValue = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action_PlayerAction {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      intValue: isSet(object.intValue) ? globalThis.Number(object.intValue) : undefined,
      floatValue: isSet(object.floatValue) ? globalThis.Number(object.floatValue) : undefined,
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : undefined,
    };
  },

  toJSON(message: Action_PlayerAction): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.intValue !== undefined) {
      obj.intValue = Math.round(message.intValue);
    }
    if (message.floatValue !== undefined) {
      obj.floatValue = message.floatValue;
    }
    if (message.boolValue !== undefined) {
      obj.boolValue = message.boolValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Action_PlayerAction>, I>>(base?: I): Action_PlayerAction {
    return Action_PlayerAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Action_PlayerAction>, I>>(object: I): Action_PlayerAction {
    const message = createBaseAction_PlayerAction();
    message.key = object.key ?? "";
    message.stringValue = object.stringValue ?? undefined;
    message.intValue = object.intValue ?? undefined;
    message.floatValue = object.floatValue ?? undefined;
    message.boolValue = object.boolValue ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
