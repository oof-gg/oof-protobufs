"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.14.0
// source: v1/api/common/global_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalServiceClient = exports.GlobalServiceService = exports.WebSocketMessage = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
const responses_1 = require("../../std/responses");
const event_1 = require("../game/event");
const event_2 = require("../global/event");
const action_1 = require("../player/action");
exports.protobufPackage = "v1.api.common";
function createBaseWebSocketMessage() {
    return { globalEvent: undefined, gameEvent: undefined, playerAction: undefined, response: undefined };
}
exports.WebSocketMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.globalEvent !== undefined) {
            event_2.GlobalEvent.encode(message.globalEvent, writer.uint32(10).fork()).join();
        }
        if (message.gameEvent !== undefined) {
            event_1.GameEvent.encode(message.gameEvent, writer.uint32(18).fork()).join();
        }
        if (message.playerAction !== undefined) {
            action_1.PlayerAction.encode(message.playerAction, writer.uint32(26).fork()).join();
        }
        if (message.response !== undefined) {
            responses_1.StandardResponse.encode(message.response, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebSocketMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.globalEvent = event_2.GlobalEvent.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gameEvent = event_1.GameEvent.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.playerAction = action_1.PlayerAction.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.response = responses_1.StandardResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            globalEvent: isSet(object.globalEvent) ? event_2.GlobalEvent.fromJSON(object.globalEvent) : undefined,
            gameEvent: isSet(object.gameEvent) ? event_1.GameEvent.fromJSON(object.gameEvent) : undefined,
            playerAction: isSet(object.playerAction) ? action_1.PlayerAction.fromJSON(object.playerAction) : undefined,
            response: isSet(object.response) ? responses_1.StandardResponse.fromJSON(object.response) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.globalEvent !== undefined) {
            obj.globalEvent = event_2.GlobalEvent.toJSON(message.globalEvent);
        }
        if (message.gameEvent !== undefined) {
            obj.gameEvent = event_1.GameEvent.toJSON(message.gameEvent);
        }
        if (message.playerAction !== undefined) {
            obj.playerAction = action_1.PlayerAction.toJSON(message.playerAction);
        }
        if (message.response !== undefined) {
            obj.response = responses_1.StandardResponse.toJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.WebSocketMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebSocketMessage();
        message.globalEvent = (object.globalEvent !== undefined && object.globalEvent !== null)
            ? event_2.GlobalEvent.fromPartial(object.globalEvent)
            : undefined;
        message.gameEvent = (object.gameEvent !== undefined && object.gameEvent !== null)
            ? event_1.GameEvent.fromPartial(object.gameEvent)
            : undefined;
        message.playerAction = (object.playerAction !== undefined && object.playerAction !== null)
            ? action_1.PlayerAction.fromPartial(object.playerAction)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? responses_1.StandardResponse.fromPartial(object.response)
            : undefined;
        return message;
    },
};
exports.GlobalServiceService = {
    /** / Stream events from the global service */
    streamEvents: {
        path: "/v1.api.common.GlobalService/StreamEvents",
        requestStream: true,
        responseStream: true,
        requestSerialize: (value) => Buffer.from(event_2.GlobalEvent.encode(value).finish()),
        requestDeserialize: (value) => event_2.GlobalEvent.decode(value),
        responseSerialize: (value) => Buffer.from(event_2.GlobalEvent.encode(value).finish()),
        responseDeserialize: (value) => event_2.GlobalEvent.decode(value),
    },
};
exports.GlobalServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.GlobalServiceService, "v1.api.common.GlobalService");
function isSet(value) {
    return value !== null && value !== undefined;
}
