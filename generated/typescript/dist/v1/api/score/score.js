"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.14.0
// source: v1/api/score/score.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardResponse = exports.PlayerRankResponse = exports.PlayerRankRequest = exports.LeaderboardRequest = exports.ScoreSubmission_MetadataEntry = exports.ScoreSubmission = exports.Leaderboard = exports.PlayerScoresResponse = exports.PlayerScoresRequest = exports.LeaderboardEntry = exports.Score_MetadataEntry = exports.Score = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = "v1.api.score";
function createBaseScore() {
    return {
        id: "",
        playerId: "",
        gameId: "",
        instanceId: "",
        value: 0,
        scoreType: "",
        createdAt: undefined,
        metadata: {},
    };
}
exports.Score = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.playerId !== "") {
            writer.uint32(18).string(message.playerId);
        }
        if (message.gameId !== "") {
            writer.uint32(26).string(message.gameId);
        }
        if (message.instanceId !== "") {
            writer.uint32(34).string(message.instanceId);
        }
        if (message.value !== 0) {
            writer.uint32(40).int64(message.value);
        }
        if (message.scoreType !== "") {
            writer.uint32(50).string(message.scoreType);
        }
        if (message.createdAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).join();
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.Score_MetadataEntry.encode({ key: key, value }, writer.uint32(66).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScore();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.instanceId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.value = longToNumber(reader.int64());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.scoreType = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.createdAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    const entry8 = exports.Score_MetadataEntry.decode(reader, reader.uint32());
                    if (entry8.value !== undefined) {
                        message.metadata[entry8.key] = entry8.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.playerId !== "") {
            obj.playerId = message.playerId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.instanceId !== "") {
            obj.instanceId = message.instanceId;
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        if (message.scoreType !== "") {
            obj.scoreType = message.scoreType;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.Score.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseScore();
        message.id = object.id ?? "";
        message.playerId = object.playerId ?? "";
        message.gameId = object.gameId ?? "";
        message.instanceId = object.instanceId ?? "";
        message.value = object.value ?? 0;
        message.scoreType = object.scoreType ?? "";
        message.createdAt = object.createdAt ?? undefined;
        message.metadata = Object.entries(object.metadata ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseScore_MetadataEntry() {
    return { key: "", value: "" };
}
exports.Score_MetadataEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScore_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Score_MetadataEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseScore_MetadataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseLeaderboardEntry() {
    return { rank: 0, score: undefined, playerName: "" };
}
exports.LeaderboardEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rank !== 0) {
            writer.uint32(8).int32(message.rank);
        }
        if (message.score !== undefined) {
            exports.Score.encode(message.score, writer.uint32(18).fork()).join();
        }
        if (message.playerName !== "") {
            writer.uint32(26).string(message.playerName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLeaderboardEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rank = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.score = exports.Score.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.playerName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
            score: isSet(object.score) ? exports.Score.fromJSON(object.score) : undefined,
            playerName: isSet(object.playerName) ? globalThis.String(object.playerName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rank !== 0) {
            obj.rank = Math.round(message.rank);
        }
        if (message.score !== undefined) {
            obj.score = exports.Score.toJSON(message.score);
        }
        if (message.playerName !== "") {
            obj.playerName = message.playerName;
        }
        return obj;
    },
    create(base) {
        return exports.LeaderboardEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLeaderboardEntry();
        message.rank = object.rank ?? 0;
        message.score = (object.score !== undefined && object.score !== null) ? exports.Score.fromPartial(object.score) : undefined;
        message.playerName = object.playerName ?? "";
        return message;
    },
};
function createBasePlayerScoresRequest() {
    return { playerId: "", gameId: "", limit: 0, offset: 0 };
}
exports.PlayerScoresRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerId !== "") {
            writer.uint32(10).string(message.playerId);
        }
        if (message.gameId !== "") {
            writer.uint32(18).string(message.gameId);
        }
        if (message.limit !== 0) {
            writer.uint32(24).int32(message.limit);
        }
        if (message.offset !== 0) {
            writer.uint32(32).int32(message.offset);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerScoresRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.offset = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
            offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerId !== "") {
            obj.playerId = message.playerId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        if (message.offset !== 0) {
            obj.offset = Math.round(message.offset);
        }
        return obj;
    },
    create(base) {
        return exports.PlayerScoresRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePlayerScoresRequest();
        message.playerId = object.playerId ?? "";
        message.gameId = object.gameId ?? "";
        message.limit = object.limit ?? 0;
        message.offset = object.offset ?? 0;
        return message;
    },
};
function createBasePlayerScoresResponse() {
    return { playerId: "", gameId: "", scores: [], totalCount: 0 };
}
exports.PlayerScoresResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerId !== "") {
            writer.uint32(10).string(message.playerId);
        }
        if (message.gameId !== "") {
            writer.uint32(18).string(message.gameId);
        }
        for (const v of message.scores) {
            exports.Score.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.totalCount !== 0) {
            writer.uint32(32).int32(message.totalCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerScoresResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.scores.push(exports.Score.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.totalCount = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            scores: globalThis.Array.isArray(object?.scores) ? object.scores.map((e) => exports.Score.fromJSON(e)) : [],
            totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerId !== "") {
            obj.playerId = message.playerId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.scores?.length) {
            obj.scores = message.scores.map((e) => exports.Score.toJSON(e));
        }
        if (message.totalCount !== 0) {
            obj.totalCount = Math.round(message.totalCount);
        }
        return obj;
    },
    create(base) {
        return exports.PlayerScoresResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePlayerScoresResponse();
        message.playerId = object.playerId ?? "";
        message.gameId = object.gameId ?? "";
        message.scores = object.scores?.map((e) => exports.Score.fromPartial(e)) || [];
        message.totalCount = object.totalCount ?? 0;
        return message;
    },
};
function createBaseLeaderboard() {
    return { gameId: "", scoreType: "", timePeriod: "", entries: [], lastUpdated: undefined };
}
exports.Leaderboard = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.gameId !== "") {
            writer.uint32(10).string(message.gameId);
        }
        if (message.scoreType !== "") {
            writer.uint32(18).string(message.scoreType);
        }
        if (message.timePeriod !== "") {
            writer.uint32(26).string(message.timePeriod);
        }
        for (const v of message.entries) {
            exports.LeaderboardEntry.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.lastUpdated !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.lastUpdated), writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLeaderboard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.scoreType = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.timePeriod = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.entries.push(exports.LeaderboardEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.lastUpdated = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
            timePeriod: isSet(object.timePeriod) ? globalThis.String(object.timePeriod) : "",
            entries: globalThis.Array.isArray(object?.entries)
                ? object.entries.map((e) => exports.LeaderboardEntry.fromJSON(e))
                : [],
            lastUpdated: isSet(object.lastUpdated) ? fromJsonTimestamp(object.lastUpdated) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.scoreType !== "") {
            obj.scoreType = message.scoreType;
        }
        if (message.timePeriod !== "") {
            obj.timePeriod = message.timePeriod;
        }
        if (message.entries?.length) {
            obj.entries = message.entries.map((e) => exports.LeaderboardEntry.toJSON(e));
        }
        if (message.lastUpdated !== undefined) {
            obj.lastUpdated = message.lastUpdated.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.Leaderboard.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLeaderboard();
        message.gameId = object.gameId ?? "";
        message.scoreType = object.scoreType ?? "";
        message.timePeriod = object.timePeriod ?? "";
        message.entries = object.entries?.map((e) => exports.LeaderboardEntry.fromPartial(e)) || [];
        message.lastUpdated = object.lastUpdated ?? undefined;
        return message;
    },
};
function createBaseScoreSubmission() {
    return { playerId: "", gameId: "", instanceId: "", value: 0, scoreType: "", metadata: {} };
}
exports.ScoreSubmission = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerId !== "") {
            writer.uint32(10).string(message.playerId);
        }
        if (message.gameId !== "") {
            writer.uint32(18).string(message.gameId);
        }
        if (message.instanceId !== "") {
            writer.uint32(26).string(message.instanceId);
        }
        if (message.value !== 0) {
            writer.uint32(32).int64(message.value);
        }
        if (message.scoreType !== "") {
            writer.uint32(42).string(message.scoreType);
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.ScoreSubmission_MetadataEntry.encode({ key: key, value }, writer.uint32(50).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScoreSubmission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.instanceId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.value = longToNumber(reader.int64());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scoreType = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = exports.ScoreSubmission_MetadataEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.metadata[entry6.key] = entry6.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerId !== "") {
            obj.playerId = message.playerId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.instanceId !== "") {
            obj.instanceId = message.instanceId;
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        if (message.scoreType !== "") {
            obj.scoreType = message.scoreType;
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.ScoreSubmission.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseScoreSubmission();
        message.playerId = object.playerId ?? "";
        message.gameId = object.gameId ?? "";
        message.instanceId = object.instanceId ?? "";
        message.value = object.value ?? 0;
        message.scoreType = object.scoreType ?? "";
        message.metadata = Object.entries(object.metadata ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseScoreSubmission_MetadataEntry() {
    return { key: "", value: "" };
}
exports.ScoreSubmission_MetadataEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScoreSubmission_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.ScoreSubmission_MetadataEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseScoreSubmission_MetadataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseLeaderboardRequest() {
    return { gameId: "", scoreType: "", timePeriod: "", limit: 0, offset: 0 };
}
exports.LeaderboardRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.gameId !== "") {
            writer.uint32(10).string(message.gameId);
        }
        if (message.scoreType !== "") {
            writer.uint32(18).string(message.scoreType);
        }
        if (message.timePeriod !== "") {
            writer.uint32(26).string(message.timePeriod);
        }
        if (message.limit !== 0) {
            writer.uint32(32).int32(message.limit);
        }
        if (message.offset !== 0) {
            writer.uint32(40).int32(message.offset);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLeaderboardRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.scoreType = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.timePeriod = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.offset = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
            timePeriod: isSet(object.timePeriod) ? globalThis.String(object.timePeriod) : "",
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
            offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.scoreType !== "") {
            obj.scoreType = message.scoreType;
        }
        if (message.timePeriod !== "") {
            obj.timePeriod = message.timePeriod;
        }
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        if (message.offset !== 0) {
            obj.offset = Math.round(message.offset);
        }
        return obj;
    },
    create(base) {
        return exports.LeaderboardRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLeaderboardRequest();
        message.gameId = object.gameId ?? "";
        message.scoreType = object.scoreType ?? "";
        message.timePeriod = object.timePeriod ?? "";
        message.limit = object.limit ?? 0;
        message.offset = object.offset ?? 0;
        return message;
    },
};
function createBasePlayerRankRequest() {
    return { playerId: "", gameId: "", scoreType: "" };
}
exports.PlayerRankRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerId !== "") {
            writer.uint32(10).string(message.playerId);
        }
        if (message.gameId !== "") {
            writer.uint32(18).string(message.gameId);
        }
        if (message.scoreType !== "") {
            writer.uint32(26).string(message.scoreType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerRankRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.scoreType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerId !== "") {
            obj.playerId = message.playerId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.scoreType !== "") {
            obj.scoreType = message.scoreType;
        }
        return obj;
    },
    create(base) {
        return exports.PlayerRankRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePlayerRankRequest();
        message.playerId = object.playerId ?? "";
        message.gameId = object.gameId ?? "";
        message.scoreType = object.scoreType ?? "";
        return message;
    },
};
function createBasePlayerRankResponse() {
    return { playerId: "", gameId: "", scoreType: "", rank: 0, scoreValue: 0, totalPlayers: 0 };
}
exports.PlayerRankResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerId !== "") {
            writer.uint32(10).string(message.playerId);
        }
        if (message.gameId !== "") {
            writer.uint32(18).string(message.gameId);
        }
        if (message.scoreType !== "") {
            writer.uint32(26).string(message.scoreType);
        }
        if (message.rank !== 0) {
            writer.uint32(32).int32(message.rank);
        }
        if (message.scoreValue !== 0) {
            writer.uint32(40).int64(message.scoreValue);
        }
        if (message.totalPlayers !== 0) {
            writer.uint32(48).int32(message.totalPlayers);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerRankResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.scoreType = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.rank = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.scoreValue = longToNumber(reader.int64());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.totalPlayers = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
            rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
            scoreValue: isSet(object.scoreValue) ? globalThis.Number(object.scoreValue) : 0,
            totalPlayers: isSet(object.totalPlayers) ? globalThis.Number(object.totalPlayers) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerId !== "") {
            obj.playerId = message.playerId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.scoreType !== "") {
            obj.scoreType = message.scoreType;
        }
        if (message.rank !== 0) {
            obj.rank = Math.round(message.rank);
        }
        if (message.scoreValue !== 0) {
            obj.scoreValue = Math.round(message.scoreValue);
        }
        if (message.totalPlayers !== 0) {
            obj.totalPlayers = Math.round(message.totalPlayers);
        }
        return obj;
    },
    create(base) {
        return exports.PlayerRankResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePlayerRankResponse();
        message.playerId = object.playerId ?? "";
        message.gameId = object.gameId ?? "";
        message.scoreType = object.scoreType ?? "";
        message.rank = object.rank ?? 0;
        message.scoreValue = object.scoreValue ?? 0;
        message.totalPlayers = object.totalPlayers ?? 0;
        return message;
    },
};
function createBaseStandardResponse() {
    return { success: false, message: "", errors: [] };
}
exports.StandardResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        for (const v of message.errors) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStandardResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.errors.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.errors?.length) {
            obj.errors = message.errors;
        }
        return obj;
    },
    create(base) {
        return exports.StandardResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStandardResponse();
        message.success = object.success ?? false;
        message.message = object.message ?? "";
        message.errors = object.errors?.map((e) => e) || [];
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
