"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: v1/api/global/join_leave.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.JoinLeaveGame = exports.JoinLeaveGame_Action = exports.RegionEnum = exports.protobufPackage = void 0;
exports.regionEnumFromJSON = regionEnumFromJSON;
exports.regionEnumToJSON = regionEnumToJSON;
exports.joinLeaveGame_ActionFromJSON = joinLeaveGame_ActionFromJSON;
exports.joinLeaveGame_ActionToJSON = joinLeaveGame_ActionToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "v1.api.global";
var RegionEnum;
(function (RegionEnum) {
    /** REGION_UNSPECIFIED - Default unspecified region */
    RegionEnum[RegionEnum["REGION_UNSPECIFIED"] = 0] = "REGION_UNSPECIFIED";
    /** NA_EAST - Americas */
    RegionEnum[RegionEnum["NA_EAST"] = 1] = "NA_EAST";
    /** NA_WEST - North America West */
    RegionEnum[RegionEnum["NA_WEST"] = 2] = "NA_WEST";
    /** SA - South America (all countries) */
    RegionEnum[RegionEnum["SA"] = 3] = "SA";
    /** EU_WEST - Europe */
    RegionEnum[RegionEnum["EU_WEST"] = 4] = "EU_WEST";
    /** EU_CENTRAL - Central Europe */
    RegionEnum[RegionEnum["EU_CENTRAL"] = 5] = "EU_CENTRAL";
    /** EU_NORTH - Northern Europe */
    RegionEnum[RegionEnum["EU_NORTH"] = 6] = "EU_NORTH";
    /** AS_EAST - Asia */
    RegionEnum[RegionEnum["AS_EAST"] = 7] = "AS_EAST";
    /** AS_SE - Southeast Asia */
    RegionEnum[RegionEnum["AS_SE"] = 8] = "AS_SE";
    /** AS_SOUTH - South Asia */
    RegionEnum[RegionEnum["AS_SOUTH"] = 9] = "AS_SOUTH";
    /** OC - Oceania */
    RegionEnum[RegionEnum["OC"] = 10] = "OC";
    /** MENA - MENA (Middle East & North Africa) */
    RegionEnum[RegionEnum["MENA"] = 11] = "MENA";
    /** AFRICA - Sub-Saharan Africa */
    RegionEnum[RegionEnum["AFRICA"] = 12] = "AFRICA";
    /** GLOBAL - Global */
    RegionEnum[RegionEnum["GLOBAL"] = 13] = "GLOBAL";
    RegionEnum[RegionEnum["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RegionEnum || (exports.RegionEnum = RegionEnum = {}));
function regionEnumFromJSON(object) {
    switch (object) {
        case 0:
        case "REGION_UNSPECIFIED":
            return RegionEnum.REGION_UNSPECIFIED;
        case 1:
        case "NA_EAST":
            return RegionEnum.NA_EAST;
        case 2:
        case "NA_WEST":
            return RegionEnum.NA_WEST;
        case 3:
        case "SA":
            return RegionEnum.SA;
        case 4:
        case "EU_WEST":
            return RegionEnum.EU_WEST;
        case 5:
        case "EU_CENTRAL":
            return RegionEnum.EU_CENTRAL;
        case 6:
        case "EU_NORTH":
            return RegionEnum.EU_NORTH;
        case 7:
        case "AS_EAST":
            return RegionEnum.AS_EAST;
        case 8:
        case "AS_SE":
            return RegionEnum.AS_SE;
        case 9:
        case "AS_SOUTH":
            return RegionEnum.AS_SOUTH;
        case 10:
        case "OC":
            return RegionEnum.OC;
        case 11:
        case "MENA":
            return RegionEnum.MENA;
        case 12:
        case "AFRICA":
            return RegionEnum.AFRICA;
        case 13:
        case "GLOBAL":
            return RegionEnum.GLOBAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RegionEnum.UNRECOGNIZED;
    }
}
function regionEnumToJSON(object) {
    switch (object) {
        case RegionEnum.REGION_UNSPECIFIED:
            return "REGION_UNSPECIFIED";
        case RegionEnum.NA_EAST:
            return "NA_EAST";
        case RegionEnum.NA_WEST:
            return "NA_WEST";
        case RegionEnum.SA:
            return "SA";
        case RegionEnum.EU_WEST:
            return "EU_WEST";
        case RegionEnum.EU_CENTRAL:
            return "EU_CENTRAL";
        case RegionEnum.EU_NORTH:
            return "EU_NORTH";
        case RegionEnum.AS_EAST:
            return "AS_EAST";
        case RegionEnum.AS_SE:
            return "AS_SE";
        case RegionEnum.AS_SOUTH:
            return "AS_SOUTH";
        case RegionEnum.OC:
            return "OC";
        case RegionEnum.MENA:
            return "MENA";
        case RegionEnum.AFRICA:
            return "AFRICA";
        case RegionEnum.GLOBAL:
            return "GLOBAL";
        case RegionEnum.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var JoinLeaveGame_Action;
(function (JoinLeaveGame_Action) {
    JoinLeaveGame_Action[JoinLeaveGame_Action["JOIN"] = 0] = "JOIN";
    JoinLeaveGame_Action[JoinLeaveGame_Action["LEAVE"] = 1] = "LEAVE";
    JoinLeaveGame_Action[JoinLeaveGame_Action["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(JoinLeaveGame_Action || (exports.JoinLeaveGame_Action = JoinLeaveGame_Action = {}));
function joinLeaveGame_ActionFromJSON(object) {
    switch (object) {
        case 0:
        case "JOIN":
            return JoinLeaveGame_Action.JOIN;
        case 1:
        case "LEAVE":
            return JoinLeaveGame_Action.LEAVE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return JoinLeaveGame_Action.UNRECOGNIZED;
    }
}
function joinLeaveGame_ActionToJSON(object) {
    switch (object) {
        case JoinLeaveGame_Action.JOIN:
            return "JOIN";
        case JoinLeaveGame_Action.LEAVE:
            return "LEAVE";
        case JoinLeaveGame_Action.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseJoinLeaveGame() {
    return { playerId: "", gameId: "", action: 0, teamId: undefined, sessionId: undefined, region: undefined };
}
exports.JoinLeaveGame = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerId !== "") {
            writer.uint32(10).string(message.playerId);
        }
        if (message.gameId !== "") {
            writer.uint32(18).string(message.gameId);
        }
        if (message.action !== 0) {
            writer.uint32(24).int32(message.action);
        }
        if (message.teamId !== undefined) {
            writer.uint32(34).string(message.teamId);
        }
        if (message.sessionId !== undefined) {
            writer.uint32(42).string(message.sessionId);
        }
        if (message.region !== undefined) {
            writer.uint32(48).int32(message.region);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseJoinLeaveGame();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.teamId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.region = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            action: isSet(object.action) ? joinLeaveGame_ActionFromJSON(object.action) : 0,
            teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : undefined,
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : undefined,
            region: isSet(object.region) ? regionEnumFromJSON(object.region) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerId !== "") {
            obj.playerId = message.playerId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.action !== 0) {
            obj.action = joinLeaveGame_ActionToJSON(message.action);
        }
        if (message.teamId !== undefined) {
            obj.teamId = message.teamId;
        }
        if (message.sessionId !== undefined) {
            obj.sessionId = message.sessionId;
        }
        if (message.region !== undefined) {
            obj.region = regionEnumToJSON(message.region);
        }
        return obj;
    },
    create(base) {
        return exports.JoinLeaveGame.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseJoinLeaveGame();
        message.playerId = object.playerId ?? "";
        message.gameId = object.gameId ?? "";
        message.action = object.action ?? 0;
        message.teamId = object.teamId ?? undefined;
        message.sessionId = object.sessionId ?? undefined;
        message.region = object.region ?? undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
