"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: v1/api/game/entity.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDeleteResponse = exports.EntityDeleteRequest = exports.EntityUpdateResponse = exports.EntityUpdateRequest = exports.EntityCreateResponse = exports.EntityCreateRequest_AttributesEntry = exports.EntityCreateRequest = exports.EntityGetResponse = exports.EntityGetRequest = exports.EntityAttribute = exports.Entities = exports.Entity_AttributesEntry = exports.Entity = exports.EntityCreateRequest_ControllerStateEnum = exports.Entity_ControllerStateEnum = exports.protobufPackage = void 0;
exports.entity_ControllerStateEnumFromJSON = entity_ControllerStateEnumFromJSON;
exports.entity_ControllerStateEnumToJSON = entity_ControllerStateEnumToJSON;
exports.entityCreateRequest_ControllerStateEnumFromJSON = entityCreateRequest_ControllerStateEnumFromJSON;
exports.entityCreateRequest_ControllerStateEnumToJSON = entityCreateRequest_ControllerStateEnumToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "v1.api.game";
var Entity_ControllerStateEnum;
(function (Entity_ControllerStateEnum) {
    Entity_ControllerStateEnum[Entity_ControllerStateEnum["SERVER"] = 0] = "SERVER";
    Entity_ControllerStateEnum[Entity_ControllerStateEnum["PLAYER"] = 1] = "PLAYER";
    Entity_ControllerStateEnum[Entity_ControllerStateEnum["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Entity_ControllerStateEnum || (exports.Entity_ControllerStateEnum = Entity_ControllerStateEnum = {}));
function entity_ControllerStateEnumFromJSON(object) {
    switch (object) {
        case 0:
        case "SERVER":
            return Entity_ControllerStateEnum.SERVER;
        case 1:
        case "PLAYER":
            return Entity_ControllerStateEnum.PLAYER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Entity_ControllerStateEnum.UNRECOGNIZED;
    }
}
function entity_ControllerStateEnumToJSON(object) {
    switch (object) {
        case Entity_ControllerStateEnum.SERVER:
            return "SERVER";
        case Entity_ControllerStateEnum.PLAYER:
            return "PLAYER";
        case Entity_ControllerStateEnum.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var EntityCreateRequest_ControllerStateEnum;
(function (EntityCreateRequest_ControllerStateEnum) {
    EntityCreateRequest_ControllerStateEnum[EntityCreateRequest_ControllerStateEnum["SERVER"] = 0] = "SERVER";
    EntityCreateRequest_ControllerStateEnum[EntityCreateRequest_ControllerStateEnum["PLAYER"] = 1] = "PLAYER";
    EntityCreateRequest_ControllerStateEnum[EntityCreateRequest_ControllerStateEnum["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EntityCreateRequest_ControllerStateEnum || (exports.EntityCreateRequest_ControllerStateEnum = EntityCreateRequest_ControllerStateEnum = {}));
function entityCreateRequest_ControllerStateEnumFromJSON(object) {
    switch (object) {
        case 0:
        case "SERVER":
            return EntityCreateRequest_ControllerStateEnum.SERVER;
        case 1:
        case "PLAYER":
            return EntityCreateRequest_ControllerStateEnum.PLAYER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return EntityCreateRequest_ControllerStateEnum.UNRECOGNIZED;
    }
}
function entityCreateRequest_ControllerStateEnumToJSON(object) {
    switch (object) {
        case EntityCreateRequest_ControllerStateEnum.SERVER:
            return "SERVER";
        case EntityCreateRequest_ControllerStateEnum.PLAYER:
            return "PLAYER";
        case EntityCreateRequest_ControllerStateEnum.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseEntity() {
    return {
        name: "",
        type: "",
        id: "",
        sessionId: "",
        gameId: "",
        attributes: {},
        controller: 0,
        playerId: undefined,
        data: undefined,
    };
}
exports.Entity = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.sessionId !== "") {
            writer.uint32(34).string(message.sessionId);
        }
        if (message.gameId !== "") {
            writer.uint32(42).string(message.gameId);
        }
        Object.entries(message.attributes).forEach(([key, value]) => {
            exports.Entity_AttributesEntry.encode({ key: key, value }, writer.uint32(50).fork()).join();
        });
        if (message.controller !== 0) {
            writer.uint32(56).int32(message.controller);
        }
        if (message.playerId !== undefined) {
            writer.uint32(66).string(message.playerId);
        }
        if (message.data !== undefined) {
            writer.uint32(74).string(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = exports.Entity_AttributesEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.attributes[entry6.key] = entry6.value;
                    }
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.controller = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            attributes: isObject(object.attributes)
                ? Object.entries(object.attributes).reduce((acc, [key, value]) => {
                    acc[key] = exports.EntityAttribute.fromJSON(value);
                    return acc;
                }, {})
                : {},
            controller: isSet(object.controller) ? entity_ControllerStateEnumFromJSON(object.controller) : 0,
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : undefined,
            data: isSet(object.data) ? globalThis.String(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.attributes) {
            const entries = Object.entries(message.attributes);
            if (entries.length > 0) {
                obj.attributes = {};
                entries.forEach(([k, v]) => {
                    obj.attributes[k] = exports.EntityAttribute.toJSON(v);
                });
            }
        }
        if (message.controller !== 0) {
            obj.controller = entity_ControllerStateEnumToJSON(message.controller);
        }
        if (message.playerId !== undefined) {
            obj.playerId = message.playerId;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return exports.Entity.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntity();
        message.name = object.name ?? "";
        message.type = object.type ?? "";
        message.id = object.id ?? "";
        message.sessionId = object.sessionId ?? "";
        message.gameId = object.gameId ?? "";
        message.attributes = Object.entries(object.attributes ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = exports.EntityAttribute.fromPartial(value);
            }
            return acc;
        }, {});
        message.controller = object.controller ?? 0;
        message.playerId = object.playerId ?? undefined;
        message.data = object.data ?? undefined;
        return message;
    },
};
function createBaseEntity_AttributesEntry() {
    return { key: "", value: undefined };
}
exports.Entity_AttributesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.EntityAttribute.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntity_AttributesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.EntityAttribute.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? exports.EntityAttribute.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.EntityAttribute.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.Entity_AttributesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntity_AttributesEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.EntityAttribute.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseEntities() {
    return { entities: [] };
}
exports.Entities = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.entities) {
            exports.Entity.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntities();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.entities.push(exports.Entity.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            entities: globalThis.Array.isArray(object?.entities) ? object.entities.map((e) => exports.Entity.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.entities?.length) {
            obj.entities = message.entities.map((e) => exports.Entity.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Entities.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntities();
        message.entities = object.entities?.map((e) => exports.Entity.fromPartial(e)) || [];
        return message;
    },
};
function createBaseEntityAttribute() {
    return { stringValue: undefined, intValue: undefined, floatValue: undefined, boolValue: undefined };
}
exports.EntityAttribute = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stringValue !== undefined) {
            writer.uint32(18).string(message.stringValue);
        }
        if (message.intValue !== undefined) {
            writer.uint32(24).int32(message.intValue);
        }
        if (message.floatValue !== undefined) {
            writer.uint32(37).float(message.floatValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(40).bool(message.boolValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntityAttribute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.stringValue = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.intValue = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 37) {
                        break;
                    }
                    message.floatValue = reader.float();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.boolValue = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
            intValue: isSet(object.intValue) ? globalThis.Number(object.intValue) : undefined,
            floatValue: isSet(object.floatValue) ? globalThis.Number(object.floatValue) : undefined,
            boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stringValue !== undefined) {
            obj.stringValue = message.stringValue;
        }
        if (message.intValue !== undefined) {
            obj.intValue = Math.round(message.intValue);
        }
        if (message.floatValue !== undefined) {
            obj.floatValue = message.floatValue;
        }
        if (message.boolValue !== undefined) {
            obj.boolValue = message.boolValue;
        }
        return obj;
    },
    create(base) {
        return exports.EntityAttribute.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntityAttribute();
        message.stringValue = object.stringValue ?? undefined;
        message.intValue = object.intValue ?? undefined;
        message.floatValue = object.floatValue ?? undefined;
        message.boolValue = object.boolValue ?? undefined;
        return message;
    },
};
function createBaseEntityGetRequest() {
    return { id: "", sessionId: "", gameId: "" };
}
exports.EntityGetRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.sessionId !== "") {
            writer.uint32(18).string(message.sessionId);
        }
        if (message.gameId !== "") {
            writer.uint32(26).string(message.gameId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntityGetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        return obj;
    },
    create(base) {
        return exports.EntityGetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntityGetRequest();
        message.id = object.id ?? "";
        message.sessionId = object.sessionId ?? "";
        message.gameId = object.gameId ?? "";
        return message;
    },
};
function createBaseEntityGetResponse() {
    return { entity: undefined };
}
exports.EntityGetResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.entity !== undefined) {
            exports.Entity.encode(message.entity, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntityGetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.entity = exports.Entity.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { entity: isSet(object.entity) ? exports.Entity.fromJSON(object.entity) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.entity !== undefined) {
            obj.entity = exports.Entity.toJSON(message.entity);
        }
        return obj;
    },
    create(base) {
        return exports.EntityGetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntityGetResponse();
        message.entity = (object.entity !== undefined && object.entity !== null)
            ? exports.Entity.fromPartial(object.entity)
            : undefined;
        return message;
    },
};
function createBaseEntityCreateRequest() {
    return {
        name: "",
        type: "",
        sessionId: "",
        gameId: "",
        attributes: {},
        controller: 0,
        playerId: undefined,
        data: undefined,
    };
}
exports.EntityCreateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        if (message.sessionId !== "") {
            writer.uint32(34).string(message.sessionId);
        }
        if (message.gameId !== "") {
            writer.uint32(42).string(message.gameId);
        }
        Object.entries(message.attributes).forEach(([key, value]) => {
            exports.EntityCreateRequest_AttributesEntry.encode({ key: key, value }, writer.uint32(50).fork()).join();
        });
        if (message.controller !== 0) {
            writer.uint32(56).int32(message.controller);
        }
        if (message.playerId !== undefined) {
            writer.uint32(66).string(message.playerId);
        }
        if (message.data !== undefined) {
            writer.uint32(74).string(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntityCreateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = exports.EntityCreateRequest_AttributesEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.attributes[entry6.key] = entry6.value;
                    }
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.controller = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            attributes: isObject(object.attributes)
                ? Object.entries(object.attributes).reduce((acc, [key, value]) => {
                    acc[key] = exports.EntityAttribute.fromJSON(value);
                    return acc;
                }, {})
                : {},
            controller: isSet(object.controller) ? entityCreateRequest_ControllerStateEnumFromJSON(object.controller) : 0,
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : undefined,
            data: isSet(object.data) ? globalThis.String(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.attributes) {
            const entries = Object.entries(message.attributes);
            if (entries.length > 0) {
                obj.attributes = {};
                entries.forEach(([k, v]) => {
                    obj.attributes[k] = exports.EntityAttribute.toJSON(v);
                });
            }
        }
        if (message.controller !== 0) {
            obj.controller = entityCreateRequest_ControllerStateEnumToJSON(message.controller);
        }
        if (message.playerId !== undefined) {
            obj.playerId = message.playerId;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return exports.EntityCreateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntityCreateRequest();
        message.name = object.name ?? "";
        message.type = object.type ?? "";
        message.sessionId = object.sessionId ?? "";
        message.gameId = object.gameId ?? "";
        message.attributes = Object.entries(object.attributes ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = exports.EntityAttribute.fromPartial(value);
            }
            return acc;
        }, {});
        message.controller = object.controller ?? 0;
        message.playerId = object.playerId ?? undefined;
        message.data = object.data ?? undefined;
        return message;
    },
};
function createBaseEntityCreateRequest_AttributesEntry() {
    return { key: "", value: undefined };
}
exports.EntityCreateRequest_AttributesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.EntityAttribute.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntityCreateRequest_AttributesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.EntityAttribute.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? exports.EntityAttribute.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.EntityAttribute.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.EntityCreateRequest_AttributesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntityCreateRequest_AttributesEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.EntityAttribute.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseEntityCreateResponse() {
    return { entity: undefined };
}
exports.EntityCreateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.entity !== undefined) {
            exports.Entity.encode(message.entity, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntityCreateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.entity = exports.Entity.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { entity: isSet(object.entity) ? exports.Entity.fromJSON(object.entity) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.entity !== undefined) {
            obj.entity = exports.Entity.toJSON(message.entity);
        }
        return obj;
    },
    create(base) {
        return exports.EntityCreateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntityCreateResponse();
        message.entity = (object.entity !== undefined && object.entity !== null)
            ? exports.Entity.fromPartial(object.entity)
            : undefined;
        return message;
    },
};
function createBaseEntityUpdateRequest() {
    return { id: "", sessionId: "", gameId: "", attributes: [] };
}
exports.EntityUpdateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.sessionId !== "") {
            writer.uint32(18).string(message.sessionId);
        }
        if (message.gameId !== "") {
            writer.uint32(26).string(message.gameId);
        }
        for (const v of message.attributes) {
            exports.EntityAttribute.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntityUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.attributes.push(exports.EntityAttribute.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            attributes: globalThis.Array.isArray(object?.attributes)
                ? object.attributes.map((e) => exports.EntityAttribute.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.attributes?.length) {
            obj.attributes = message.attributes.map((e) => exports.EntityAttribute.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.EntityUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntityUpdateRequest();
        message.id = object.id ?? "";
        message.sessionId = object.sessionId ?? "";
        message.gameId = object.gameId ?? "";
        message.attributes = object.attributes?.map((e) => exports.EntityAttribute.fromPartial(e)) || [];
        return message;
    },
};
function createBaseEntityUpdateResponse() {
    return { entity: undefined };
}
exports.EntityUpdateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.entity !== undefined) {
            exports.Entity.encode(message.entity, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntityUpdateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.entity = exports.Entity.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { entity: isSet(object.entity) ? exports.Entity.fromJSON(object.entity) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.entity !== undefined) {
            obj.entity = exports.Entity.toJSON(message.entity);
        }
        return obj;
    },
    create(base) {
        return exports.EntityUpdateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntityUpdateResponse();
        message.entity = (object.entity !== undefined && object.entity !== null)
            ? exports.Entity.fromPartial(object.entity)
            : undefined;
        return message;
    },
};
function createBaseEntityDeleteRequest() {
    return { id: "", sessionId: "", gameId: "" };
}
exports.EntityDeleteRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.sessionId !== "") {
            writer.uint32(18).string(message.sessionId);
        }
        if (message.gameId !== "") {
            writer.uint32(26).string(message.gameId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntityDeleteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        return obj;
    },
    create(base) {
        return exports.EntityDeleteRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntityDeleteRequest();
        message.id = object.id ?? "";
        message.sessionId = object.sessionId ?? "";
        message.gameId = object.gameId ?? "";
        return message;
    },
};
function createBaseEntityDeleteResponse() {
    return { id: "", sessionId: "", gameId: "" };
}
exports.EntityDeleteResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.sessionId !== "") {
            writer.uint32(18).string(message.sessionId);
        }
        if (message.gameId !== "") {
            writer.uint32(26).string(message.gameId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEntityDeleteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sessionId !== "") {
            obj.sessionId = message.sessionId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        return obj;
    },
    create(base) {
        return exports.EntityDeleteResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEntityDeleteResponse();
        message.id = object.id ?? "";
        message.sessionId = object.sessionId ?? "";
        message.gameId = object.gameId ?? "";
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
