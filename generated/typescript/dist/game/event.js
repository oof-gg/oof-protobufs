// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: game/event.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "game";
/** CUSTOM - Custom events */
export var GameEvent_EventType;
(function (GameEvent_EventType) {
    GameEvent_EventType[GameEvent_EventType["CUSTOM"] = 0] = "CUSTOM";
    GameEvent_EventType[GameEvent_EventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GameEvent_EventType || (GameEvent_EventType = {}));
export function gameEvent_EventTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "CUSTOM":
            return GameEvent_EventType.CUSTOM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return GameEvent_EventType.UNRECOGNIZED;
    }
}
export function gameEvent_EventTypeToJSON(object) {
    switch (object) {
        case GameEvent_EventType.CUSTOM:
            return "CUSTOM";
        case GameEvent_EventType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseGameEvent() {
    return {
        id: "",
        eventName: "",
        timestamp: 0,
        gameId: undefined,
        playerId: undefined,
        sessionId: undefined,
        teamId: undefined,
        attributes: {},
        type: 0,
    };
}
export const GameEvent = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.eventName !== "") {
            writer.uint32(18).string(message.eventName);
        }
        if (message.timestamp !== 0) {
            writer.uint32(24).int64(message.timestamp);
        }
        if (message.gameId !== undefined) {
            writer.uint32(34).string(message.gameId);
        }
        if (message.playerId !== undefined) {
            writer.uint32(42).string(message.playerId);
        }
        if (message.sessionId !== undefined) {
            writer.uint32(58).string(message.sessionId);
        }
        if (message.teamId !== undefined) {
            writer.uint32(66).string(message.teamId);
        }
        Object.entries(message.attributes).forEach(([key, value]) => {
            GameEvent_AttributesEntry.encode({ key: key, value }, writer.uint32(74).fork()).join();
        });
        if (message.type !== 0) {
            writer.uint32(80).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGameEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.eventName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp = longToNumber(reader.int64());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.teamId = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    const entry9 = GameEvent_AttributesEntry.decode(reader, reader.uint32());
                    if (entry9.value !== undefined) {
                        message.attributes[entry9.key] = entry9.value;
                    }
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            eventName: isSet(object.eventName) ? globalThis.String(object.eventName) : "",
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : undefined,
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : undefined,
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : undefined,
            teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : undefined,
            attributes: isObject(object.attributes)
                ? Object.entries(object.attributes).reduce((acc, [key, value]) => {
                    acc[key] = GameEvent_EventAttribute.fromJSON(value);
                    return acc;
                }, {})
                : {},
            type: isSet(object.type) ? gameEvent_EventTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.eventName !== "") {
            obj.eventName = message.eventName;
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        if (message.gameId !== undefined) {
            obj.gameId = message.gameId;
        }
        if (message.playerId !== undefined) {
            obj.playerId = message.playerId;
        }
        if (message.sessionId !== undefined) {
            obj.sessionId = message.sessionId;
        }
        if (message.teamId !== undefined) {
            obj.teamId = message.teamId;
        }
        if (message.attributes) {
            const entries = Object.entries(message.attributes);
            if (entries.length > 0) {
                obj.attributes = {};
                entries.forEach(([k, v]) => {
                    obj.attributes[k] = GameEvent_EventAttribute.toJSON(v);
                });
            }
        }
        if (message.type !== 0) {
            obj.type = gameEvent_EventTypeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return GameEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseGameEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.eventName = (_b = object.eventName) !== null && _b !== void 0 ? _b : "";
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : 0;
        message.gameId = (_d = object.gameId) !== null && _d !== void 0 ? _d : undefined;
        message.playerId = (_e = object.playerId) !== null && _e !== void 0 ? _e : undefined;
        message.sessionId = (_f = object.sessionId) !== null && _f !== void 0 ? _f : undefined;
        message.teamId = (_g = object.teamId) !== null && _g !== void 0 ? _g : undefined;
        message.attributes = Object.entries((_h = object.attributes) !== null && _h !== void 0 ? _h : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = GameEvent_EventAttribute.fromPartial(value);
            }
            return acc;
        }, {});
        message.type = (_j = object.type) !== null && _j !== void 0 ? _j : 0;
        return message;
    },
};
function createBaseGameEvent_AttributesEntry() {
    return { key: "", value: undefined };
}
export const GameEvent_AttributesEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            GameEvent_EventAttribute.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGameEvent_AttributesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = GameEvent_EventAttribute.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? GameEvent_EventAttribute.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = GameEvent_EventAttribute.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return GameEvent_AttributesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGameEvent_AttributesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? GameEvent_EventAttribute.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseGameEvent_EventAttribute() {
    return { stringValue: undefined, intValue: undefined, floatValue: undefined, boolValue: undefined };
}
export const GameEvent_EventAttribute = {
    encode(message, writer = new BinaryWriter()) {
        if (message.stringValue !== undefined) {
            writer.uint32(10).string(message.stringValue);
        }
        if (message.intValue !== undefined) {
            writer.uint32(16).int32(message.intValue);
        }
        if (message.floatValue !== undefined) {
            writer.uint32(29).float(message.floatValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(32).bool(message.boolValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGameEvent_EventAttribute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stringValue = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.intValue = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.floatValue = reader.float();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.boolValue = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
            intValue: isSet(object.intValue) ? globalThis.Number(object.intValue) : undefined,
            floatValue: isSet(object.floatValue) ? globalThis.Number(object.floatValue) : undefined,
            boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stringValue !== undefined) {
            obj.stringValue = message.stringValue;
        }
        if (message.intValue !== undefined) {
            obj.intValue = Math.round(message.intValue);
        }
        if (message.floatValue !== undefined) {
            obj.floatValue = message.floatValue;
        }
        if (message.boolValue !== undefined) {
            obj.boolValue = message.boolValue;
        }
        return obj;
    },
    create(base) {
        return GameEvent_EventAttribute.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGameEvent_EventAttribute();
        message.stringValue = (_a = object.stringValue) !== null && _a !== void 0 ? _a : undefined;
        message.intValue = (_b = object.intValue) !== null && _b !== void 0 ? _b : undefined;
        message.floatValue = (_c = object.floatValue) !== null && _c !== void 0 ? _c : undefined;
        message.boolValue = (_d = object.boolValue) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
