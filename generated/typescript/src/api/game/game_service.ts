// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: api/game/game_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  ClientDuplexStream,
  type ClientOptions,
  type ClientUnaryCall,
  handleBidiStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { StandardResponse } from "../../std/responses";
import { Entities, EntityCreate, EntityDelete, EntityGet, EntityUpdate } from "./entity";
import { GameEvent } from "./event";
import { Session, SessionDelete, SessionGet, Sessions } from "./session";

export const protobufPackage = "api.game";

export type GameService = typeof GameService;
export const GameService = {
  createSession: {
    path: "/api.game.Game/CreateSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Session) => Buffer.from(Session.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Session.decode(value),
    responseSerialize: (value: StandardResponse) => Buffer.from(StandardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StandardResponse.decode(value),
  },
  getSession: {
    path: "/api.game.Game/GetSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SessionGet) => Buffer.from(SessionGet.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SessionGet.decode(value),
    responseSerialize: (value: Sessions) => Buffer.from(Sessions.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Sessions.decode(value),
  },
  updateSession: {
    path: "/api.game.Game/UpdateSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Session) => Buffer.from(Session.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Session.decode(value),
    responseSerialize: (value: StandardResponse) => Buffer.from(StandardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StandardResponse.decode(value),
  },
  deleteSession: {
    path: "/api.game.Game/DeleteSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SessionDelete) => Buffer.from(SessionDelete.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SessionDelete.decode(value),
    responseSerialize: (value: StandardResponse) => Buffer.from(StandardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StandardResponse.decode(value),
  },
  /** TODO: Adjust payloads for protos */
  createEntity: {
    path: "/api.game.Game/CreateEntity",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EntityCreate) => Buffer.from(EntityCreate.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EntityCreate.decode(value),
    responseSerialize: (value: StandardResponse) => Buffer.from(StandardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StandardResponse.decode(value),
  },
  getEntity: {
    path: "/api.game.Game/GetEntity",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EntityGet) => Buffer.from(EntityGet.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EntityGet.decode(value),
    responseSerialize: (value: Entities) => Buffer.from(Entities.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Entities.decode(value),
  },
  updateEntity: {
    path: "/api.game.Game/UpdateEntity",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EntityUpdate) => Buffer.from(EntityUpdate.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EntityUpdate.decode(value),
    responseSerialize: (value: StandardResponse) => Buffer.from(StandardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StandardResponse.decode(value),
  },
  deleteEntity: {
    path: "/api.game.Game/DeleteEntity",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EntityDelete) => Buffer.from(EntityDelete.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EntityDelete.decode(value),
    responseSerialize: (value: StandardResponse) => Buffer.from(StandardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StandardResponse.decode(value),
  },
  /** Stream events from the game */
  streamEvents: {
    path: "/api.game.Game/StreamEvents",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: GameEvent) => Buffer.from(GameEvent.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GameEvent.decode(value),
    responseSerialize: (value: GameEvent) => Buffer.from(GameEvent.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GameEvent.decode(value),
  },
} as const;

export interface GameServer extends UntypedServiceImplementation {
  createSession: handleUnaryCall<Session, StandardResponse>;
  getSession: handleUnaryCall<SessionGet, Sessions>;
  updateSession: handleUnaryCall<Session, StandardResponse>;
  deleteSession: handleUnaryCall<SessionDelete, StandardResponse>;
  /** TODO: Adjust payloads for protos */
  createEntity: handleUnaryCall<EntityCreate, StandardResponse>;
  getEntity: handleUnaryCall<EntityGet, Entities>;
  updateEntity: handleUnaryCall<EntityUpdate, StandardResponse>;
  deleteEntity: handleUnaryCall<EntityDelete, StandardResponse>;
  /** Stream events from the game */
  streamEvents: handleBidiStreamingCall<GameEvent, GameEvent>;
}

export interface GameClient extends Client {
  createSession(
    request: Session,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  createSession(
    request: Session,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  createSession(
    request: Session,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  getSession(request: SessionGet, callback: (error: ServiceError | null, response: Sessions) => void): ClientUnaryCall;
  getSession(
    request: SessionGet,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Sessions) => void,
  ): ClientUnaryCall;
  getSession(
    request: SessionGet,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Sessions) => void,
  ): ClientUnaryCall;
  updateSession(
    request: Session,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  updateSession(
    request: Session,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  updateSession(
    request: Session,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  deleteSession(
    request: SessionDelete,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  deleteSession(
    request: SessionDelete,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  deleteSession(
    request: SessionDelete,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  /** TODO: Adjust payloads for protos */
  createEntity(
    request: EntityCreate,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  createEntity(
    request: EntityCreate,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  createEntity(
    request: EntityCreate,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  getEntity(request: EntityGet, callback: (error: ServiceError | null, response: Entities) => void): ClientUnaryCall;
  getEntity(
    request: EntityGet,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Entities) => void,
  ): ClientUnaryCall;
  getEntity(
    request: EntityGet,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Entities) => void,
  ): ClientUnaryCall;
  updateEntity(
    request: EntityUpdate,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  updateEntity(
    request: EntityUpdate,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  updateEntity(
    request: EntityUpdate,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  deleteEntity(
    request: EntityDelete,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  deleteEntity(
    request: EntityDelete,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  deleteEntity(
    request: EntityDelete,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  /** Stream events from the game */
  streamEvents(): ClientDuplexStream<GameEvent, GameEvent>;
  streamEvents(options: Partial<CallOptions>): ClientDuplexStream<GameEvent, GameEvent>;
  streamEvents(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<GameEvent, GameEvent>;
}

export const GameClient = makeGenericClientConstructor(GameService, "api.game.Game") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GameClient;
  service: typeof GameService;
  serviceName: string;
};
