// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: api/player/player_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  ClientDuplexStream,
  type ClientOptions,
  handleBidiStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { PlayerAction } from "./action";

export const protobufPackage = "api.player";

export type PlayerServiceService = typeof PlayerServiceService;
export const PlayerServiceService = {
  streamEvents: {
    path: "/api.player.PlayerService/StreamEvents",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: PlayerAction) => Buffer.from(PlayerAction.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PlayerAction.decode(value),
    responseSerialize: (value: PlayerAction) => Buffer.from(PlayerAction.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PlayerAction.decode(value),
  },
} as const;

export interface PlayerServiceServer extends UntypedServiceImplementation {
  streamEvents: handleBidiStreamingCall<PlayerAction, PlayerAction>;
}

export interface PlayerServiceClient extends Client {
  streamEvents(): ClientDuplexStream<PlayerAction, PlayerAction>;
  streamEvents(options: Partial<CallOptions>): ClientDuplexStream<PlayerAction, PlayerAction>;
  streamEvents(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<PlayerAction, PlayerAction>;
}

export const PlayerServiceClient = makeGenericClientConstructor(
  PlayerServiceService,
  "api.player.PlayerService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PlayerServiceClient;
  service: typeof PlayerServiceService;
  serviceName: string;
};
