// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.14.0
// source: v1/api/score/score.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "v1.api.score";

export interface Score {
  id: string;
  playerId: string;
  gameId: string;
  /** optional - for game session tracking */
  instanceId: string;
  value: number;
  /** "points", "time", "kills", etc. */
  scoreType: string;
  createdAt:
    | Date
    | undefined;
  /** flexible for game-specific data */
  metadata: { [key: string]: string };
}

export interface Score_MetadataEntry {
  key: string;
  value: string;
}

export interface LeaderboardEntry {
  rank: number;
  score:
    | Score
    | undefined;
  /** denormalized for performance */
  playerName: string;
}

export interface PlayerScoresRequest {
  playerId: string;
  /** optional, if not provided, fetch all scores for the player */
  gameId: string;
  /** maximum number of scores to return */
  limit: number;
  /** for pagination */
  offset: number;
}

export interface PlayerScoresResponse {
  playerId: string;
  /** if provided in request */
  gameId: string;
  scores: Score[];
  /** total number of scores available for the player */
  totalCount: number;
}

export interface Leaderboard {
  gameId: string;
  scoreType: string;
  /** "all_time", "daily", "weekly", "monthly" */
  timePeriod: string;
  entries: LeaderboardEntry[];
  lastUpdated: Date | undefined;
}

export interface ScoreSubmission {
  playerId: string;
  gameId: string;
  instanceId: string;
  value: number;
  scoreType: string;
  metadata: { [key: string]: string };
}

export interface ScoreSubmission_MetadataEntry {
  key: string;
  value: string;
}

export interface LeaderboardRequest {
  gameId: string;
  scoreType: string;
  timePeriod: string;
  limit: number;
  offset: number;
}

export interface PlayerRankRequest {
  playerId: string;
  /** optional, if not provided, fetch rank across all games */
  gameId: string;
  /** optional, if not provided, fetch overall rank */
  scoreType: string;
}

export interface PlayerRankResponse {
  playerId: string;
  /** if provided in request */
  gameId: string;
  /** if provided in request */
  scoreType: string;
  /** player's rank in the leaderboard */
  rank: number;
  /** player's score value */
  scoreValue: number;
  /** total number of players in the leaderboard for this game/score type */
  totalPlayers: number;
}

export interface StandardResponse {
  success: boolean;
  message: string;
  errors: string[];
}

function createBaseScore(): Score {
  return {
    id: "",
    playerId: "",
    gameId: "",
    instanceId: "",
    value: 0,
    scoreType: "",
    createdAt: undefined,
    metadata: {},
  };
}

export const Score: MessageFns<Score> = {
  encode(message: Score, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.gameId !== "") {
      writer.uint32(26).string(message.gameId);
    }
    if (message.instanceId !== "") {
      writer.uint32(34).string(message.instanceId);
    }
    if (message.value !== 0) {
      writer.uint32(40).int64(message.value);
    }
    if (message.scoreType !== "") {
      writer.uint32(50).string(message.scoreType);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      Score_MetadataEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Score {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.value = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.scoreType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = Score_MetadataEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.metadata[entry8.key] = entry8.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Score {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Score): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    if (message.scoreType !== "") {
      obj.scoreType = message.scoreType;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Score>, I>>(base?: I): Score {
    return Score.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Score>, I>>(object: I): Score {
    const message = createBaseScore();
    message.id = object.id ?? "";
    message.playerId = object.playerId ?? "";
    message.gameId = object.gameId ?? "";
    message.instanceId = object.instanceId ?? "";
    message.value = object.value ?? 0;
    message.scoreType = object.scoreType ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseScore_MetadataEntry(): Score_MetadataEntry {
  return { key: "", value: "" };
}

export const Score_MetadataEntry: MessageFns<Score_MetadataEntry> = {
  encode(message: Score_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Score_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScore_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Score_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Score_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Score_MetadataEntry>, I>>(base?: I): Score_MetadataEntry {
    return Score_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Score_MetadataEntry>, I>>(object: I): Score_MetadataEntry {
    const message = createBaseScore_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLeaderboardEntry(): LeaderboardEntry {
  return { rank: 0, score: undefined, playerName: "" };
}

export const LeaderboardEntry: MessageFns<LeaderboardEntry> = {
  encode(message: LeaderboardEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rank !== 0) {
      writer.uint32(8).int32(message.rank);
    }
    if (message.score !== undefined) {
      Score.encode(message.score, writer.uint32(18).fork()).join();
    }
    if (message.playerName !== "") {
      writer.uint32(26).string(message.playerName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaderboardEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaderboardEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rank = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.score = Score.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playerName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaderboardEntry {
    return {
      rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
      score: isSet(object.score) ? Score.fromJSON(object.score) : undefined,
      playerName: isSet(object.playerName) ? globalThis.String(object.playerName) : "",
    };
  },

  toJSON(message: LeaderboardEntry): unknown {
    const obj: any = {};
    if (message.rank !== 0) {
      obj.rank = Math.round(message.rank);
    }
    if (message.score !== undefined) {
      obj.score = Score.toJSON(message.score);
    }
    if (message.playerName !== "") {
      obj.playerName = message.playerName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LeaderboardEntry>, I>>(base?: I): LeaderboardEntry {
    return LeaderboardEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeaderboardEntry>, I>>(object: I): LeaderboardEntry {
    const message = createBaseLeaderboardEntry();
    message.rank = object.rank ?? 0;
    message.score = (object.score !== undefined && object.score !== null) ? Score.fromPartial(object.score) : undefined;
    message.playerName = object.playerName ?? "";
    return message;
  },
};

function createBasePlayerScoresRequest(): PlayerScoresRequest {
  return { playerId: "", gameId: "", limit: 0, offset: 0 };
}

export const PlayerScoresRequest: MessageFns<PlayerScoresRequest> = {
  encode(message: PlayerScoresRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    if (message.limit !== 0) {
      writer.uint32(24).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(32).int32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerScoresRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerScoresRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerScoresRequest {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: PlayerScoresRequest): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerScoresRequest>, I>>(base?: I): PlayerScoresRequest {
    return PlayerScoresRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerScoresRequest>, I>>(object: I): PlayerScoresRequest {
    const message = createBasePlayerScoresRequest();
    message.playerId = object.playerId ?? "";
    message.gameId = object.gameId ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBasePlayerScoresResponse(): PlayerScoresResponse {
  return { playerId: "", gameId: "", scores: [], totalCount: 0 };
}

export const PlayerScoresResponse: MessageFns<PlayerScoresResponse> = {
  encode(message: PlayerScoresResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    for (const v of message.scores) {
      Score.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(32).int32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerScoresResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerScoresResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.scores.push(Score.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerScoresResponse {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      scores: globalThis.Array.isArray(object?.scores) ? object.scores.map((e: any) => Score.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
    };
  },

  toJSON(message: PlayerScoresResponse): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.scores?.length) {
      obj.scores = message.scores.map((e) => Score.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerScoresResponse>, I>>(base?: I): PlayerScoresResponse {
    return PlayerScoresResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerScoresResponse>, I>>(object: I): PlayerScoresResponse {
    const message = createBasePlayerScoresResponse();
    message.playerId = object.playerId ?? "";
    message.gameId = object.gameId ?? "";
    message.scores = object.scores?.map((e) => Score.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

function createBaseLeaderboard(): Leaderboard {
  return { gameId: "", scoreType: "", timePeriod: "", entries: [], lastUpdated: undefined };
}

export const Leaderboard: MessageFns<Leaderboard> = {
  encode(message: Leaderboard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    if (message.scoreType !== "") {
      writer.uint32(18).string(message.scoreType);
    }
    if (message.timePeriod !== "") {
      writer.uint32(26).string(message.timePeriod);
    }
    for (const v of message.entries) {
      LeaderboardEntry.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.lastUpdated !== undefined) {
      Timestamp.encode(toTimestamp(message.lastUpdated), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Leaderboard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaderboard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.scoreType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timePeriod = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.entries.push(LeaderboardEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lastUpdated = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Leaderboard {
    return {
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
      timePeriod: isSet(object.timePeriod) ? globalThis.String(object.timePeriod) : "",
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => LeaderboardEntry.fromJSON(e))
        : [],
      lastUpdated: isSet(object.lastUpdated) ? fromJsonTimestamp(object.lastUpdated) : undefined,
    };
  },

  toJSON(message: Leaderboard): unknown {
    const obj: any = {};
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.scoreType !== "") {
      obj.scoreType = message.scoreType;
    }
    if (message.timePeriod !== "") {
      obj.timePeriod = message.timePeriod;
    }
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => LeaderboardEntry.toJSON(e));
    }
    if (message.lastUpdated !== undefined) {
      obj.lastUpdated = message.lastUpdated.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Leaderboard>, I>>(base?: I): Leaderboard {
    return Leaderboard.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Leaderboard>, I>>(object: I): Leaderboard {
    const message = createBaseLeaderboard();
    message.gameId = object.gameId ?? "";
    message.scoreType = object.scoreType ?? "";
    message.timePeriod = object.timePeriod ?? "";
    message.entries = object.entries?.map((e) => LeaderboardEntry.fromPartial(e)) || [];
    message.lastUpdated = object.lastUpdated ?? undefined;
    return message;
  },
};

function createBaseScoreSubmission(): ScoreSubmission {
  return { playerId: "", gameId: "", instanceId: "", value: 0, scoreType: "", metadata: {} };
}

export const ScoreSubmission: MessageFns<ScoreSubmission> = {
  encode(message: ScoreSubmission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    if (message.instanceId !== "") {
      writer.uint32(26).string(message.instanceId);
    }
    if (message.value !== 0) {
      writer.uint32(32).int64(message.value);
    }
    if (message.scoreType !== "") {
      writer.uint32(42).string(message.scoreType);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      ScoreSubmission_MetadataEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScoreSubmission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScoreSubmission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.value = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.scoreType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = ScoreSubmission_MetadataEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.metadata[entry6.key] = entry6.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScoreSubmission {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ScoreSubmission): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    if (message.scoreType !== "") {
      obj.scoreType = message.scoreType;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScoreSubmission>, I>>(base?: I): ScoreSubmission {
    return ScoreSubmission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScoreSubmission>, I>>(object: I): ScoreSubmission {
    const message = createBaseScoreSubmission();
    message.playerId = object.playerId ?? "";
    message.gameId = object.gameId ?? "";
    message.instanceId = object.instanceId ?? "";
    message.value = object.value ?? 0;
    message.scoreType = object.scoreType ?? "";
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseScoreSubmission_MetadataEntry(): ScoreSubmission_MetadataEntry {
  return { key: "", value: "" };
}

export const ScoreSubmission_MetadataEntry: MessageFns<ScoreSubmission_MetadataEntry> = {
  encode(message: ScoreSubmission_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScoreSubmission_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScoreSubmission_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScoreSubmission_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ScoreSubmission_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScoreSubmission_MetadataEntry>, I>>(base?: I): ScoreSubmission_MetadataEntry {
    return ScoreSubmission_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScoreSubmission_MetadataEntry>, I>>(
    object: I,
  ): ScoreSubmission_MetadataEntry {
    const message = createBaseScoreSubmission_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLeaderboardRequest(): LeaderboardRequest {
  return { gameId: "", scoreType: "", timePeriod: "", limit: 0, offset: 0 };
}

export const LeaderboardRequest: MessageFns<LeaderboardRequest> = {
  encode(message: LeaderboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    if (message.scoreType !== "") {
      writer.uint32(18).string(message.scoreType);
    }
    if (message.timePeriod !== "") {
      writer.uint32(26).string(message.timePeriod);
    }
    if (message.limit !== 0) {
      writer.uint32(32).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(40).int32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaderboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaderboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.scoreType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timePeriod = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaderboardRequest {
    return {
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
      timePeriod: isSet(object.timePeriod) ? globalThis.String(object.timePeriod) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: LeaderboardRequest): unknown {
    const obj: any = {};
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.scoreType !== "") {
      obj.scoreType = message.scoreType;
    }
    if (message.timePeriod !== "") {
      obj.timePeriod = message.timePeriod;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LeaderboardRequest>, I>>(base?: I): LeaderboardRequest {
    return LeaderboardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeaderboardRequest>, I>>(object: I): LeaderboardRequest {
    const message = createBaseLeaderboardRequest();
    message.gameId = object.gameId ?? "";
    message.scoreType = object.scoreType ?? "";
    message.timePeriod = object.timePeriod ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBasePlayerRankRequest(): PlayerRankRequest {
  return { playerId: "", gameId: "", scoreType: "" };
}

export const PlayerRankRequest: MessageFns<PlayerRankRequest> = {
  encode(message: PlayerRankRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    if (message.scoreType !== "") {
      writer.uint32(26).string(message.scoreType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerRankRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerRankRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.scoreType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerRankRequest {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
    };
  },

  toJSON(message: PlayerRankRequest): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.scoreType !== "") {
      obj.scoreType = message.scoreType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerRankRequest>, I>>(base?: I): PlayerRankRequest {
    return PlayerRankRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerRankRequest>, I>>(object: I): PlayerRankRequest {
    const message = createBasePlayerRankRequest();
    message.playerId = object.playerId ?? "";
    message.gameId = object.gameId ?? "";
    message.scoreType = object.scoreType ?? "";
    return message;
  },
};

function createBasePlayerRankResponse(): PlayerRankResponse {
  return { playerId: "", gameId: "", scoreType: "", rank: 0, scoreValue: 0, totalPlayers: 0 };
}

export const PlayerRankResponse: MessageFns<PlayerRankResponse> = {
  encode(message: PlayerRankResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    if (message.scoreType !== "") {
      writer.uint32(26).string(message.scoreType);
    }
    if (message.rank !== 0) {
      writer.uint32(32).int32(message.rank);
    }
    if (message.scoreValue !== 0) {
      writer.uint32(40).int64(message.scoreValue);
    }
    if (message.totalPlayers !== 0) {
      writer.uint32(48).int32(message.totalPlayers);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerRankResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerRankResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.scoreType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.rank = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.scoreValue = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.totalPlayers = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerRankResponse {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      scoreType: isSet(object.scoreType) ? globalThis.String(object.scoreType) : "",
      rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
      scoreValue: isSet(object.scoreValue) ? globalThis.Number(object.scoreValue) : 0,
      totalPlayers: isSet(object.totalPlayers) ? globalThis.Number(object.totalPlayers) : 0,
    };
  },

  toJSON(message: PlayerRankResponse): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.scoreType !== "") {
      obj.scoreType = message.scoreType;
    }
    if (message.rank !== 0) {
      obj.rank = Math.round(message.rank);
    }
    if (message.scoreValue !== 0) {
      obj.scoreValue = Math.round(message.scoreValue);
    }
    if (message.totalPlayers !== 0) {
      obj.totalPlayers = Math.round(message.totalPlayers);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerRankResponse>, I>>(base?: I): PlayerRankResponse {
    return PlayerRankResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerRankResponse>, I>>(object: I): PlayerRankResponse {
    const message = createBasePlayerRankResponse();
    message.playerId = object.playerId ?? "";
    message.gameId = object.gameId ?? "";
    message.scoreType = object.scoreType ?? "";
    message.rank = object.rank ?? 0;
    message.scoreValue = object.scoreValue ?? 0;
    message.totalPlayers = object.totalPlayers ?? 0;
    return message;
  },
};

function createBaseStandardResponse(): StandardResponse {
  return { success: false, message: "", errors: [] };
}

export const StandardResponse: MessageFns<StandardResponse> = {
  encode(message: StandardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    for (const v of message.errors) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StandardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStandardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.errors.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StandardResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: StandardResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.errors?.length) {
      obj.errors = message.errors;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StandardResponse>, I>>(base?: I): StandardResponse {
    return StandardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StandardResponse>, I>>(object: I): StandardResponse {
    const message = createBaseStandardResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.errors = object.errors?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
