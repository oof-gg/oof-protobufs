// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: v1/api/player/player_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  ClientDuplexStream,
  type ClientOptions,
  type ClientUnaryCall,
  handleBidiStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { PlayerAction } from "./action";
import { Player, PlayerGet, Players, PlayerUpdate } from "./player";

export const protobufPackage = "v1.api.player";

export type PlayerServiceService = typeof PlayerServiceService;
export const PlayerServiceService = {
  createPlayer: {
    path: "/v1.api.player.PlayerService/CreatePlayer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Player) => Buffer.from(Player.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Player.decode(value),
    responseSerialize: (value: Player) => Buffer.from(Player.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Player.decode(value),
  },
  getPlayer: {
    path: "/v1.api.player.PlayerService/GetPlayer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PlayerGet) => Buffer.from(PlayerGet.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PlayerGet.decode(value),
    responseSerialize: (value: Players) => Buffer.from(Players.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Players.decode(value),
  },
  updatePlayer: {
    path: "/v1.api.player.PlayerService/UpdatePlayer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PlayerUpdate) => Buffer.from(PlayerUpdate.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PlayerUpdate.decode(value),
    responseSerialize: (value: Player) => Buffer.from(Player.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Player.decode(value),
  },
  streamEvents: {
    path: "/v1.api.player.PlayerService/StreamEvents",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: PlayerAction) => Buffer.from(PlayerAction.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PlayerAction.decode(value),
    responseSerialize: (value: PlayerAction) => Buffer.from(PlayerAction.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PlayerAction.decode(value),
  },
} as const;

export interface PlayerServiceServer extends UntypedServiceImplementation {
  createPlayer: handleUnaryCall<Player, Player>;
  getPlayer: handleUnaryCall<PlayerGet, Players>;
  updatePlayer: handleUnaryCall<PlayerUpdate, Player>;
  streamEvents: handleBidiStreamingCall<PlayerAction, PlayerAction>;
}

export interface PlayerServiceClient extends Client {
  createPlayer(request: Player, callback: (error: ServiceError | null, response: Player) => void): ClientUnaryCall;
  createPlayer(
    request: Player,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Player) => void,
  ): ClientUnaryCall;
  createPlayer(
    request: Player,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Player) => void,
  ): ClientUnaryCall;
  getPlayer(request: PlayerGet, callback: (error: ServiceError | null, response: Players) => void): ClientUnaryCall;
  getPlayer(
    request: PlayerGet,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Players) => void,
  ): ClientUnaryCall;
  getPlayer(
    request: PlayerGet,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Players) => void,
  ): ClientUnaryCall;
  updatePlayer(
    request: PlayerUpdate,
    callback: (error: ServiceError | null, response: Player) => void,
  ): ClientUnaryCall;
  updatePlayer(
    request: PlayerUpdate,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Player) => void,
  ): ClientUnaryCall;
  updatePlayer(
    request: PlayerUpdate,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Player) => void,
  ): ClientUnaryCall;
  streamEvents(): ClientDuplexStream<PlayerAction, PlayerAction>;
  streamEvents(options: Partial<CallOptions>): ClientDuplexStream<PlayerAction, PlayerAction>;
  streamEvents(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<PlayerAction, PlayerAction>;
}

export const PlayerServiceClient = makeGenericClientConstructor(
  PlayerServiceService,
  "v1.api.player.PlayerService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PlayerServiceClient;
  service: typeof PlayerServiceService;
  serviceName: string;
};
