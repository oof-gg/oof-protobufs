// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: v1/api/player/player.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "v1.api.player";

export enum PlayerType {
  /** HUMAN - default */
  HUMAN = 0,
  AI = 1,
  UNRECOGNIZED = -1,
}

export function playerTypeFromJSON(object: any): PlayerType {
  switch (object) {
    case 0:
    case "HUMAN":
      return PlayerType.HUMAN;
    case 1:
    case "AI":
      return PlayerType.AI;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlayerType.UNRECOGNIZED;
  }
}

export function playerTypeToJSON(object: PlayerType): string {
  switch (object) {
    case PlayerType.HUMAN:
      return "HUMAN";
    case PlayerType.AI:
      return "AI";
    case PlayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PlayerStatus {
  /** ACTIVE - default */
  ACTIVE = 0,
  INACTIVE = 1,
  UNRECOGNIZED = -1,
}

export function playerStatusFromJSON(object: any): PlayerStatus {
  switch (object) {
    case 0:
    case "ACTIVE":
      return PlayerStatus.ACTIVE;
    case 1:
    case "INACTIVE":
      return PlayerStatus.INACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlayerStatus.UNRECOGNIZED;
  }
}

export function playerStatusToJSON(object: PlayerStatus): string {
  switch (object) {
    case PlayerStatus.ACTIVE:
      return "ACTIVE";
    case PlayerStatus.INACTIVE:
      return "INACTIVE";
    case PlayerStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Player {
  id: string;
  username: string;
  email?: string | undefined;
  team?: string | undefined;
  score: number;
  type: PlayerType;
  status: PlayerStatus;
  /** Role of the player in the game */
  role?: string | undefined;
}

export interface PlayerCreate {
  username: string;
  email?: string | undefined;
  team?: string | undefined;
  score: number;
  type: PlayerType;
  status: PlayerStatus;
  role?: string | undefined;
}

export interface PlayerUpdate {
  id: string;
  team?: string | undefined;
  type?: PlayerType | undefined;
  status?: PlayerStatus | undefined;
  role?: string | undefined;
}

export interface PlayerGet {
  id?: string | undefined;
}

export interface Players {
  players: Player[];
}

function createBasePlayer(): Player {
  return { id: "", username: "", email: undefined, team: undefined, score: 0, type: 0, status: 0, role: undefined };
}

export const Player: MessageFns<Player> = {
  encode(message: Player, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.email !== undefined) {
      writer.uint32(26).string(message.email);
    }
    if (message.team !== undefined) {
      writer.uint32(34).string(message.team);
    }
    if (message.score !== 0) {
      writer.uint32(40).int32(message.score);
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    if (message.status !== 0) {
      writer.uint32(56).int32(message.status);
    }
    if (message.role !== undefined) {
      writer.uint32(66).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Player {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.team = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Player {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      team: isSet(object.team) ? globalThis.String(object.team) : undefined,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      type: isSet(object.type) ? playerTypeFromJSON(object.type) : 0,
      status: isSet(object.status) ? playerStatusFromJSON(object.status) : 0,
      role: isSet(object.role) ? globalThis.String(object.role) : undefined,
    };
  },

  toJSON(message: Player): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.team !== undefined) {
      obj.team = message.team;
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.type !== 0) {
      obj.type = playerTypeToJSON(message.type);
    }
    if (message.status !== 0) {
      obj.status = playerStatusToJSON(message.status);
    }
    if (message.role !== undefined) {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.id = object.id ?? "";
    message.username = object.username ?? "";
    message.email = object.email ?? undefined;
    message.team = object.team ?? undefined;
    message.score = object.score ?? 0;
    message.type = object.type ?? 0;
    message.status = object.status ?? 0;
    message.role = object.role ?? undefined;
    return message;
  },
};

function createBasePlayerCreate(): PlayerCreate {
  return { username: "", email: undefined, team: undefined, score: 0, type: 0, status: 0, role: undefined };
}

export const PlayerCreate: MessageFns<PlayerCreate> = {
  encode(message: PlayerCreate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.email !== undefined) {
      writer.uint32(18).string(message.email);
    }
    if (message.team !== undefined) {
      writer.uint32(26).string(message.team);
    }
    if (message.score !== 0) {
      writer.uint32(32).int32(message.score);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.role !== undefined) {
      writer.uint32(58).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerCreate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerCreate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.team = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerCreate {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      team: isSet(object.team) ? globalThis.String(object.team) : undefined,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      type: isSet(object.type) ? playerTypeFromJSON(object.type) : 0,
      status: isSet(object.status) ? playerStatusFromJSON(object.status) : 0,
      role: isSet(object.role) ? globalThis.String(object.role) : undefined,
    };
  },

  toJSON(message: PlayerCreate): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.team !== undefined) {
      obj.team = message.team;
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.type !== 0) {
      obj.type = playerTypeToJSON(message.type);
    }
    if (message.status !== 0) {
      obj.status = playerStatusToJSON(message.status);
    }
    if (message.role !== undefined) {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerCreate>, I>>(base?: I): PlayerCreate {
    return PlayerCreate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerCreate>, I>>(object: I): PlayerCreate {
    const message = createBasePlayerCreate();
    message.username = object.username ?? "";
    message.email = object.email ?? undefined;
    message.team = object.team ?? undefined;
    message.score = object.score ?? 0;
    message.type = object.type ?? 0;
    message.status = object.status ?? 0;
    message.role = object.role ?? undefined;
    return message;
  },
};

function createBasePlayerUpdate(): PlayerUpdate {
  return { id: "", team: undefined, type: undefined, status: undefined, role: undefined };
}

export const PlayerUpdate: MessageFns<PlayerUpdate> = {
  encode(message: PlayerUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.team !== undefined) {
      writer.uint32(34).string(message.team);
    }
    if (message.type !== undefined) {
      writer.uint32(48).int32(message.type);
    }
    if (message.status !== undefined) {
      writer.uint32(56).int32(message.status);
    }
    if (message.role !== undefined) {
      writer.uint32(66).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.team = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerUpdate {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      team: isSet(object.team) ? globalThis.String(object.team) : undefined,
      type: isSet(object.type) ? playerTypeFromJSON(object.type) : undefined,
      status: isSet(object.status) ? playerStatusFromJSON(object.status) : undefined,
      role: isSet(object.role) ? globalThis.String(object.role) : undefined,
    };
  },

  toJSON(message: PlayerUpdate): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.team !== undefined) {
      obj.team = message.team;
    }
    if (message.type !== undefined) {
      obj.type = playerTypeToJSON(message.type);
    }
    if (message.status !== undefined) {
      obj.status = playerStatusToJSON(message.status);
    }
    if (message.role !== undefined) {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerUpdate>, I>>(base?: I): PlayerUpdate {
    return PlayerUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerUpdate>, I>>(object: I): PlayerUpdate {
    const message = createBasePlayerUpdate();
    message.id = object.id ?? "";
    message.team = object.team ?? undefined;
    message.type = object.type ?? undefined;
    message.status = object.status ?? undefined;
    message.role = object.role ?? undefined;
    return message;
  },
};

function createBasePlayerGet(): PlayerGet {
  return { id: undefined };
}

export const PlayerGet: MessageFns<PlayerGet> = {
  encode(message: PlayerGet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerGet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerGet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerGet {
    return { id: isSet(object.id) ? globalThis.String(object.id) : undefined };
  },

  toJSON(message: PlayerGet): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerGet>, I>>(base?: I): PlayerGet {
    return PlayerGet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerGet>, I>>(object: I): PlayerGet {
    const message = createBasePlayerGet();
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBasePlayers(): Players {
  return { players: [] };
}

export const Players: MessageFns<Players> = {
  encode(message: Players, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.players) {
      Player.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Players {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.players.push(Player.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Players {
    return {
      players: globalThis.Array.isArray(object?.players) ? object.players.map((e: any) => Player.fromJSON(e)) : [],
    };
  },

  toJSON(message: Players): unknown {
    const obj: any = {};
    if (message.players?.length) {
      obj.players = message.players.map((e) => Player.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Players>, I>>(base?: I): Players {
    return Players.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Players>, I>>(object: I): Players {
    const message = createBasePlayers();
    message.players = object.players?.map((e) => Player.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
