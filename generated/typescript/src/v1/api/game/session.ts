// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: v1/api/game/session.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "v1.api.game";

/** / Represents the state of a game session */
export enum GameState {
  /** CREATED - / The session has been created */
  CREATED = 0,
  /** WAITING - / The session is waiting for players to join */
  WAITING = 1,
  /** STARTED - / The session has started */
  STARTED = 2,
  /** FINISHED - / The session has finished */
  FINISHED = 3,
  UNRECOGNIZED = -1,
}

export function gameStateFromJSON(object: any): GameState {
  switch (object) {
    case 0:
    case "CREATED":
      return GameState.CREATED;
    case 1:
    case "WAITING":
      return GameState.WAITING;
    case 2:
    case "STARTED":
      return GameState.STARTED;
    case 3:
    case "FINISHED":
      return GameState.FINISHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GameState.UNRECOGNIZED;
  }
}

export function gameStateToJSON(object: GameState): string {
  switch (object) {
    case GameState.CREATED:
      return "CREATED";
    case GameState.WAITING:
      return "WAITING";
    case GameState.STARTED:
      return "STARTED";
    case GameState.FINISHED:
      return "FINISHED";
    case GameState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * TODO: Check if this is the best way to represent game attributes
 * / Represents a game attribute
 */
export interface GameAttribute {
  stringValue?: string | undefined;
  intValue?: number | undefined;
  floatValue?: number | undefined;
  boolValue?: boolean | undefined;
}

/** / Represents a game session, can be used to store game state and attributes such as scores, times, players, and active in-game configurations. */
export interface Session {
  id: string;
  gameId: string;
  /**
   * / Players in the session (can be used to store player state and attributes)
   * / Optional: This can be used to store player state and attributes, but not recommended for large player counts.
   */
  playerIds: string[];
  /** / Game state as defined by the GameState enum */
  state: GameState;
  /** / Game attributes as a map of string to GameAttribute */
  attributes: { [key: string]: GameAttribute };
}

export interface Session_AttributesEntry {
  key: string;
  value: GameAttribute | undefined;
}

/** / Represents a game session creation request */
export interface SessionCreate {
  gameId: string;
  playerIds: string[];
  state: GameState;
  attributes: { [key: string]: GameAttribute };
}

export interface SessionCreate_AttributesEntry {
  key: string;
  value: GameAttribute | undefined;
}

export interface SessionUpdate {
  id: string;
  gameId: string;
  playerIds: string[];
  state: GameState;
  attributes: { [key: string]: GameAttribute };
}

export interface SessionUpdate_AttributesEntry {
  key: string;
  value: GameAttribute | undefined;
}

/** / Represents a game session update request */
export interface SessionGet {
  id?: string | undefined;
  gameId?: string | undefined;
}

/** / Represents a game session deletion request */
export interface SessionDelete {
  id: string;
  gameId: string;
}

/** / Represents a list of game sessions */
export interface Sessions {
  sessions: Session[];
}

function createBaseGameAttribute(): GameAttribute {
  return { stringValue: undefined, intValue: undefined, floatValue: undefined, boolValue: undefined };
}

export const GameAttribute: MessageFns<GameAttribute> = {
  encode(message: GameAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stringValue !== undefined) {
      writer.uint32(18).string(message.stringValue);
    }
    if (message.intValue !== undefined) {
      writer.uint32(24).int32(message.intValue);
    }
    if (message.floatValue !== undefined) {
      writer.uint32(37).float(message.floatValue);
    }
    if (message.boolValue !== undefined) {
      writer.uint32(40).bool(message.boolValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.intValue = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.floatValue = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameAttribute {
    return {
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      intValue: isSet(object.intValue) ? globalThis.Number(object.intValue) : undefined,
      floatValue: isSet(object.floatValue) ? globalThis.Number(object.floatValue) : undefined,
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : undefined,
    };
  },

  toJSON(message: GameAttribute): unknown {
    const obj: any = {};
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.intValue !== undefined) {
      obj.intValue = Math.round(message.intValue);
    }
    if (message.floatValue !== undefined) {
      obj.floatValue = message.floatValue;
    }
    if (message.boolValue !== undefined) {
      obj.boolValue = message.boolValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameAttribute>, I>>(base?: I): GameAttribute {
    return GameAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameAttribute>, I>>(object: I): GameAttribute {
    const message = createBaseGameAttribute();
    message.stringValue = object.stringValue ?? undefined;
    message.intValue = object.intValue ?? undefined;
    message.floatValue = object.floatValue ?? undefined;
    message.boolValue = object.boolValue ?? undefined;
    return message;
  },
};

function createBaseSession(): Session {
  return { id: "", gameId: "", playerIds: [], state: 0, attributes: {} };
}

export const Session: MessageFns<Session> = {
  encode(message: Session, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    for (const v of message.playerIds) {
      writer.uint32(26).string(v!);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      Session_AttributesEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Session {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playerIds.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = Session_AttributesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.attributes[entry5.key] = entry5.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      playerIds: globalThis.Array.isArray(object?.playerIds)
        ? object.playerIds.map((e: any) => globalThis.String(e))
        : [],
      state: isSet(object.state) ? gameStateFromJSON(object.state) : 0,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: GameAttribute }>((acc, [key, value]) => {
          acc[key] = GameAttribute.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Session): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.playerIds?.length) {
      obj.playerIds = message.playerIds;
    }
    if (message.state !== 0) {
      obj.state = gameStateToJSON(message.state);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = GameAttribute.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Session>, I>>(base?: I): Session {
    return Session.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Session>, I>>(object: I): Session {
    const message = createBaseSession();
    message.id = object.id ?? "";
    message.gameId = object.gameId ?? "";
    message.playerIds = object.playerIds?.map((e) => e) || [];
    message.state = object.state ?? 0;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: GameAttribute }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = GameAttribute.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSession_AttributesEntry(): Session_AttributesEntry {
  return { key: "", value: undefined };
}

export const Session_AttributesEntry: MessageFns<Session_AttributesEntry> = {
  encode(message: Session_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      GameAttribute.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Session_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = GameAttribute.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? GameAttribute.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Session_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = GameAttribute.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Session_AttributesEntry>, I>>(base?: I): Session_AttributesEntry {
    return Session_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Session_AttributesEntry>, I>>(object: I): Session_AttributesEntry {
    const message = createBaseSession_AttributesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? GameAttribute.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSessionCreate(): SessionCreate {
  return { gameId: "", playerIds: [], state: 0, attributes: {} };
}

export const SessionCreate: MessageFns<SessionCreate> = {
  encode(message: SessionCreate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    for (const v of message.playerIds) {
      writer.uint32(18).string(v!);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      SessionCreate_AttributesEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionCreate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionCreate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = SessionCreate_AttributesEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.attributes[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionCreate {
    return {
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      playerIds: globalThis.Array.isArray(object?.playerIds)
        ? object.playerIds.map((e: any) => globalThis.String(e))
        : [],
      state: isSet(object.state) ? gameStateFromJSON(object.state) : 0,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: GameAttribute }>((acc, [key, value]) => {
          acc[key] = GameAttribute.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SessionCreate): unknown {
    const obj: any = {};
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.playerIds?.length) {
      obj.playerIds = message.playerIds;
    }
    if (message.state !== 0) {
      obj.state = gameStateToJSON(message.state);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = GameAttribute.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionCreate>, I>>(base?: I): SessionCreate {
    return SessionCreate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionCreate>, I>>(object: I): SessionCreate {
    const message = createBaseSessionCreate();
    message.gameId = object.gameId ?? "";
    message.playerIds = object.playerIds?.map((e) => e) || [];
    message.state = object.state ?? 0;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: GameAttribute }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = GameAttribute.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSessionCreate_AttributesEntry(): SessionCreate_AttributesEntry {
  return { key: "", value: undefined };
}

export const SessionCreate_AttributesEntry: MessageFns<SessionCreate_AttributesEntry> = {
  encode(message: SessionCreate_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      GameAttribute.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionCreate_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionCreate_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = GameAttribute.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionCreate_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? GameAttribute.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SessionCreate_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = GameAttribute.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionCreate_AttributesEntry>, I>>(base?: I): SessionCreate_AttributesEntry {
    return SessionCreate_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionCreate_AttributesEntry>, I>>(
    object: I,
  ): SessionCreate_AttributesEntry {
    const message = createBaseSessionCreate_AttributesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? GameAttribute.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSessionUpdate(): SessionUpdate {
  return { id: "", gameId: "", playerIds: [], state: 0, attributes: {} };
}

export const SessionUpdate: MessageFns<SessionUpdate> = {
  encode(message: SessionUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    for (const v of message.playerIds) {
      writer.uint32(26).string(v!);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      SessionUpdate_AttributesEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playerIds.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = SessionUpdate_AttributesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.attributes[entry5.key] = entry5.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionUpdate {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      playerIds: globalThis.Array.isArray(object?.playerIds)
        ? object.playerIds.map((e: any) => globalThis.String(e))
        : [],
      state: isSet(object.state) ? gameStateFromJSON(object.state) : 0,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: GameAttribute }>((acc, [key, value]) => {
          acc[key] = GameAttribute.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SessionUpdate): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.playerIds?.length) {
      obj.playerIds = message.playerIds;
    }
    if (message.state !== 0) {
      obj.state = gameStateToJSON(message.state);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = GameAttribute.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionUpdate>, I>>(base?: I): SessionUpdate {
    return SessionUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionUpdate>, I>>(object: I): SessionUpdate {
    const message = createBaseSessionUpdate();
    message.id = object.id ?? "";
    message.gameId = object.gameId ?? "";
    message.playerIds = object.playerIds?.map((e) => e) || [];
    message.state = object.state ?? 0;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: GameAttribute }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = GameAttribute.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSessionUpdate_AttributesEntry(): SessionUpdate_AttributesEntry {
  return { key: "", value: undefined };
}

export const SessionUpdate_AttributesEntry: MessageFns<SessionUpdate_AttributesEntry> = {
  encode(message: SessionUpdate_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      GameAttribute.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionUpdate_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionUpdate_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = GameAttribute.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionUpdate_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? GameAttribute.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SessionUpdate_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = GameAttribute.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionUpdate_AttributesEntry>, I>>(base?: I): SessionUpdate_AttributesEntry {
    return SessionUpdate_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionUpdate_AttributesEntry>, I>>(
    object: I,
  ): SessionUpdate_AttributesEntry {
    const message = createBaseSessionUpdate_AttributesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? GameAttribute.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSessionGet(): SessionGet {
  return { id: undefined, gameId: undefined };
}

export const SessionGet: MessageFns<SessionGet> = {
  encode(message: SessionGet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.gameId !== undefined) {
      writer.uint32(18).string(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionGet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionGet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionGet {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : undefined,
    };
  },

  toJSON(message: SessionGet): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.gameId !== undefined) {
      obj.gameId = message.gameId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionGet>, I>>(base?: I): SessionGet {
    return SessionGet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionGet>, I>>(object: I): SessionGet {
    const message = createBaseSessionGet();
    message.id = object.id ?? undefined;
    message.gameId = object.gameId ?? undefined;
    return message;
  },
};

function createBaseSessionDelete(): SessionDelete {
  return { id: "", gameId: "" };
}

export const SessionDelete: MessageFns<SessionDelete> = {
  encode(message: SessionDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.gameId !== "") {
      writer.uint32(18).string(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionDelete {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
    };
  },

  toJSON(message: SessionDelete): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionDelete>, I>>(base?: I): SessionDelete {
    return SessionDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionDelete>, I>>(object: I): SessionDelete {
    const message = createBaseSessionDelete();
    message.id = object.id ?? "";
    message.gameId = object.gameId ?? "";
    return message;
  },
};

function createBaseSessions(): Sessions {
  return { sessions: [] };
}

export const Sessions: MessageFns<Sessions> = {
  encode(message: Sessions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessions) {
      Session.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Sessions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessions.push(Session.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sessions {
    return {
      sessions: globalThis.Array.isArray(object?.sessions) ? object.sessions.map((e: any) => Session.fromJSON(e)) : [],
    };
  },

  toJSON(message: Sessions): unknown {
    const obj: any = {};
    if (message.sessions?.length) {
      obj.sessions = message.sessions.map((e) => Session.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Sessions>, I>>(base?: I): Sessions {
    return Sessions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Sessions>, I>>(object: I): Sessions {
    const message = createBaseSessions();
    message.sessions = object.sessions?.map((e) => Session.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
