// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.14.0
// source: v1/api/common/score_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  Leaderboard,
  LeaderboardRequest,
  PlayerRankRequest,
  PlayerRankResponse,
  PlayerScoresRequest,
  PlayerScoresResponse,
  ScoreSubmission,
  StandardResponse,
} from "../score/score";

export const protobufPackage = "v1.api.common";

export type ScoreServiceService = typeof ScoreServiceService;
export const ScoreServiceService = {
  submitScore: {
    path: "/v1.api.common.ScoreService/SubmitScore",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ScoreSubmission) => Buffer.from(ScoreSubmission.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ScoreSubmission.decode(value),
    responseSerialize: (value: StandardResponse) => Buffer.from(StandardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StandardResponse.decode(value),
  },
  getPlayerScores: {
    path: "/v1.api.common.ScoreService/GetPlayerScores",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PlayerScoresRequest) => Buffer.from(PlayerScoresRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PlayerScoresRequest.decode(value),
    responseSerialize: (value: PlayerScoresResponse) => Buffer.from(PlayerScoresResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PlayerScoresResponse.decode(value),
  },
  getLeaderboard: {
    path: "/v1.api.common.ScoreService/GetLeaderboard",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LeaderboardRequest) => Buffer.from(LeaderboardRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LeaderboardRequest.decode(value),
    responseSerialize: (value: Leaderboard) => Buffer.from(Leaderboard.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Leaderboard.decode(value),
  },
  getPlayerRank: {
    path: "/v1.api.common.ScoreService/GetPlayerRank",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PlayerRankRequest) => Buffer.from(PlayerRankRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PlayerRankRequest.decode(value),
    responseSerialize: (value: PlayerRankResponse) => Buffer.from(PlayerRankResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PlayerRankResponse.decode(value),
  },
} as const;

export interface ScoreServiceServer extends UntypedServiceImplementation {
  submitScore: handleUnaryCall<ScoreSubmission, StandardResponse>;
  getPlayerScores: handleUnaryCall<PlayerScoresRequest, PlayerScoresResponse>;
  getLeaderboard: handleUnaryCall<LeaderboardRequest, Leaderboard>;
  getPlayerRank: handleUnaryCall<PlayerRankRequest, PlayerRankResponse>;
}

export interface ScoreServiceClient extends Client {
  submitScore(
    request: ScoreSubmission,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  submitScore(
    request: ScoreSubmission,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  submitScore(
    request: ScoreSubmission,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  getPlayerScores(
    request: PlayerScoresRequest,
    callback: (error: ServiceError | null, response: PlayerScoresResponse) => void,
  ): ClientUnaryCall;
  getPlayerScores(
    request: PlayerScoresRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PlayerScoresResponse) => void,
  ): ClientUnaryCall;
  getPlayerScores(
    request: PlayerScoresRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PlayerScoresResponse) => void,
  ): ClientUnaryCall;
  getLeaderboard(
    request: LeaderboardRequest,
    callback: (error: ServiceError | null, response: Leaderboard) => void,
  ): ClientUnaryCall;
  getLeaderboard(
    request: LeaderboardRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Leaderboard) => void,
  ): ClientUnaryCall;
  getLeaderboard(
    request: LeaderboardRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Leaderboard) => void,
  ): ClientUnaryCall;
  getPlayerRank(
    request: PlayerRankRequest,
    callback: (error: ServiceError | null, response: PlayerRankResponse) => void,
  ): ClientUnaryCall;
  getPlayerRank(
    request: PlayerRankRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PlayerRankResponse) => void,
  ): ClientUnaryCall;
  getPlayerRank(
    request: PlayerRankRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PlayerRankResponse) => void,
  ): ClientUnaryCall;
}

export const ScoreServiceClient = makeGenericClientConstructor(
  ScoreServiceService,
  "v1.api.common.ScoreService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ScoreServiceClient;
  service: typeof ScoreServiceService;
  serviceName: string;
};
