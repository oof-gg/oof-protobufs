// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.14.0
// source: v1/api/common/player_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Player, PlayerGet, PlayerUpdate, StandardResponse } from "../player/player";

export const protobufPackage = "v1.api.common";

export type PlayerServiceService = typeof PlayerServiceService;
export const PlayerServiceService = {
  createPlayer: {
    path: "/v1.api.common.PlayerService/CreatePlayer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Player) => Buffer.from(Player.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Player.decode(value),
    responseSerialize: (value: StandardResponse) => Buffer.from(StandardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StandardResponse.decode(value),
  },
  getPlayer: {
    path: "/v1.api.common.PlayerService/GetPlayer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PlayerGet) => Buffer.from(PlayerGet.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PlayerGet.decode(value),
    responseSerialize: (value: StandardResponse) => Buffer.from(StandardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StandardResponse.decode(value),
  },
  updatePlayer: {
    path: "/v1.api.common.PlayerService/UpdatePlayer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PlayerUpdate) => Buffer.from(PlayerUpdate.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PlayerUpdate.decode(value),
    responseSerialize: (value: StandardResponse) => Buffer.from(StandardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StandardResponse.decode(value),
  },
} as const;

export interface PlayerServiceServer extends UntypedServiceImplementation {
  createPlayer: handleUnaryCall<Player, StandardResponse>;
  getPlayer: handleUnaryCall<PlayerGet, StandardResponse>;
  updatePlayer: handleUnaryCall<PlayerUpdate, StandardResponse>;
}

export interface PlayerServiceClient extends Client {
  createPlayer(
    request: Player,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  createPlayer(
    request: Player,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  createPlayer(
    request: Player,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  getPlayer(
    request: PlayerGet,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  getPlayer(
    request: PlayerGet,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  getPlayer(
    request: PlayerGet,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  updatePlayer(
    request: PlayerUpdate,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  updatePlayer(
    request: PlayerUpdate,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
  updatePlayer(
    request: PlayerUpdate,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StandardResponse) => void,
  ): ClientUnaryCall;
}

export const PlayerServiceClient = makeGenericClientConstructor(
  PlayerServiceService,
  "v1.api.common.PlayerService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PlayerServiceClient;
  service: typeof PlayerServiceService;
  serviceName: string;
};
