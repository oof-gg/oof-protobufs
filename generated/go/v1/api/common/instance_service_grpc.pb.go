// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package common

import (
	context "context"
	game "github.com/oof-gg/oof-protobufs/generated/go/v1/api/game"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstanceServiceClient is the client API for InstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceServiceClient interface {
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (InstanceService_StreamEventsClient, error)
}

type instanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceServiceClient(cc grpc.ClientConnInterface) InstanceServiceClient {
	return &instanceServiceClient{cc}
}

func (c *instanceServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (InstanceService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &InstanceService_ServiceDesc.Streams[0], "/v1.api.common.InstanceService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &instanceServiceStreamEventsClient{stream}
	return x, nil
}

type InstanceService_StreamEventsClient interface {
	Send(*game.GameEvent) error
	Recv() (*game.GameEvent, error)
	grpc.ClientStream
}

type instanceServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *instanceServiceStreamEventsClient) Send(m *game.GameEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *instanceServiceStreamEventsClient) Recv() (*game.GameEvent, error) {
	m := new(game.GameEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InstanceServiceServer is the server API for InstanceService service.
// All implementations must embed UnimplementedInstanceServiceServer
// for forward compatibility
type InstanceServiceServer interface {
	StreamEvents(InstanceService_StreamEventsServer) error
	mustEmbedUnimplementedInstanceServiceServer()
}

// UnimplementedInstanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceServiceServer struct {
}

func (UnimplementedInstanceServiceServer) StreamEvents(InstanceService_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedInstanceServiceServer) mustEmbedUnimplementedInstanceServiceServer() {}

// UnsafeInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceServiceServer will
// result in compilation errors.
type UnsafeInstanceServiceServer interface {
	mustEmbedUnimplementedInstanceServiceServer()
}

func RegisterInstanceServiceServer(s grpc.ServiceRegistrar, srv InstanceServiceServer) {
	s.RegisterService(&InstanceService_ServiceDesc, srv)
}

func _InstanceService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InstanceServiceServer).StreamEvents(&instanceServiceStreamEventsServer{stream})
}

type InstanceService_StreamEventsServer interface {
	Send(*game.GameEvent) error
	Recv() (*game.GameEvent, error)
	grpc.ServerStream
}

type instanceServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *instanceServiceStreamEventsServer) Send(m *game.GameEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *instanceServiceStreamEventsServer) Recv() (*game.GameEvent, error) {
	m := new(game.GameEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InstanceService_ServiceDesc is the grpc.ServiceDesc for InstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.api.common.InstanceService",
	HandlerType: (*InstanceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _InstanceService_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/api/common/instance_service.proto",
}
