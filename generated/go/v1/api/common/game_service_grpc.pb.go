// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package common

import (
	context "context"
	game "github.com/oof-gg/oof-protobufs/generated/go/v1/api/game"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	/// Join or leave a game, returns the queued session if not joined
	JoinLeave(ctx context.Context, in *game.JoinLeaveGame, opts ...grpc.CallOption) (*game.StandardResponse, error)
	CreateSession(ctx context.Context, in *game.SessionCreate, opts ...grpc.CallOption) (*game.StandardResponse, error)
	GetSession(ctx context.Context, in *game.SessionGet, opts ...grpc.CallOption) (*game.StandardResponse, error)
	UpdateSession(ctx context.Context, in *game.SessionUpdate, opts ...grpc.CallOption) (*game.StandardResponse, error)
	DeleteSession(ctx context.Context, in *game.SessionDelete, opts ...grpc.CallOption) (*game.StandardResponse, error)
	//TODO: Adjust payloads for protos
	/// Create a new entity
	CreateEntity(ctx context.Context, in *game.EntityCreateRequest, opts ...grpc.CallOption) (*game.StandardResponse, error)
	/// Get an entity by ID
	GetEntity(ctx context.Context, in *game.EntityGetRequest, opts ...grpc.CallOption) (*game.PaginatedResponse, error)
	/// Update an entity by ID
	UpdateEntity(ctx context.Context, in *game.EntityUpdateRequest, opts ...grpc.CallOption) (*game.StandardResponse, error)
	/// Delete an entity by ID
	DeleteEntity(ctx context.Context, in *game.EntityDeleteRequest, opts ...grpc.CallOption) (*game.StandardResponse, error)
	/// Create a new game
	CreateGame(ctx context.Context, in *game.GameCreateRequest, opts ...grpc.CallOption) (*game.StandardResponse, error)
	/// Get a game by ID
	GetGame(ctx context.Context, in *game.GameGetRequest, opts ...grpc.CallOption) (*game.PaginatedResponse, error)
	/// Update a game by ID
	UpdateGame(ctx context.Context, in *game.GameUpdateRequest, opts ...grpc.CallOption) (*game.StandardResponse, error)
	/// Trending games
	TrendingGame(ctx context.Context, in *game.TrendingGamesRequest, opts ...grpc.CallOption) (*game.PaginatedResponse, error)
	/// Wait for queue updates
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (GameService_StreamEventsClient, error)
	/// Stream events from the game
	WatchQueue(ctx context.Context, in *game.Session, opts ...grpc.CallOption) (GameService_WatchQueueClient, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) JoinLeave(ctx context.Context, in *game.JoinLeaveGame, opts ...grpc.CallOption) (*game.StandardResponse, error) {
	out := new(game.StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/JoinLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) CreateSession(ctx context.Context, in *game.SessionCreate, opts ...grpc.CallOption) (*game.StandardResponse, error) {
	out := new(game.StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetSession(ctx context.Context, in *game.SessionGet, opts ...grpc.CallOption) (*game.StandardResponse, error) {
	out := new(game.StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) UpdateSession(ctx context.Context, in *game.SessionUpdate, opts ...grpc.CallOption) (*game.StandardResponse, error) {
	out := new(game.StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/UpdateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) DeleteSession(ctx context.Context, in *game.SessionDelete, opts ...grpc.CallOption) (*game.StandardResponse, error) {
	out := new(game.StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) CreateEntity(ctx context.Context, in *game.EntityCreateRequest, opts ...grpc.CallOption) (*game.StandardResponse, error) {
	out := new(game.StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetEntity(ctx context.Context, in *game.EntityGetRequest, opts ...grpc.CallOption) (*game.PaginatedResponse, error) {
	out := new(game.PaginatedResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) UpdateEntity(ctx context.Context, in *game.EntityUpdateRequest, opts ...grpc.CallOption) (*game.StandardResponse, error) {
	out := new(game.StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/UpdateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) DeleteEntity(ctx context.Context, in *game.EntityDeleteRequest, opts ...grpc.CallOption) (*game.StandardResponse, error) {
	out := new(game.StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) CreateGame(ctx context.Context, in *game.GameCreateRequest, opts ...grpc.CallOption) (*game.StandardResponse, error) {
	out := new(game.StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetGame(ctx context.Context, in *game.GameGetRequest, opts ...grpc.CallOption) (*game.PaginatedResponse, error) {
	out := new(game.PaginatedResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) UpdateGame(ctx context.Context, in *game.GameUpdateRequest, opts ...grpc.CallOption) (*game.StandardResponse, error) {
	out := new(game.StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/UpdateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) TrendingGame(ctx context.Context, in *game.TrendingGamesRequest, opts ...grpc.CallOption) (*game.PaginatedResponse, error) {
	out := new(game.PaginatedResponse)
	err := c.cc.Invoke(ctx, "/v1.api.common.GameService/TrendingGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (GameService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[0], "/v1.api.common.GameService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceStreamEventsClient{stream}
	return x, nil
}

type GameService_StreamEventsClient interface {
	Send(*game.GameEvent) error
	Recv() (*game.GameEvent, error)
	grpc.ClientStream
}

type gameServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *gameServiceStreamEventsClient) Send(m *game.GameEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServiceStreamEventsClient) Recv() (*game.GameEvent, error) {
	m := new(game.GameEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServiceClient) WatchQueue(ctx context.Context, in *game.Session, opts ...grpc.CallOption) (GameService_WatchQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[1], "/v1.api.common.GameService/WatchQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceWatchQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameService_WatchQueueClient interface {
	Recv() (*game.Session, error)
	grpc.ClientStream
}

type gameServiceWatchQueueClient struct {
	grpc.ClientStream
}

func (x *gameServiceWatchQueueClient) Recv() (*game.Session, error) {
	m := new(game.Session)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	/// Join or leave a game, returns the queued session if not joined
	JoinLeave(context.Context, *game.JoinLeaveGame) (*game.StandardResponse, error)
	CreateSession(context.Context, *game.SessionCreate) (*game.StandardResponse, error)
	GetSession(context.Context, *game.SessionGet) (*game.StandardResponse, error)
	UpdateSession(context.Context, *game.SessionUpdate) (*game.StandardResponse, error)
	DeleteSession(context.Context, *game.SessionDelete) (*game.StandardResponse, error)
	//TODO: Adjust payloads for protos
	/// Create a new entity
	CreateEntity(context.Context, *game.EntityCreateRequest) (*game.StandardResponse, error)
	/// Get an entity by ID
	GetEntity(context.Context, *game.EntityGetRequest) (*game.PaginatedResponse, error)
	/// Update an entity by ID
	UpdateEntity(context.Context, *game.EntityUpdateRequest) (*game.StandardResponse, error)
	/// Delete an entity by ID
	DeleteEntity(context.Context, *game.EntityDeleteRequest) (*game.StandardResponse, error)
	/// Create a new game
	CreateGame(context.Context, *game.GameCreateRequest) (*game.StandardResponse, error)
	/// Get a game by ID
	GetGame(context.Context, *game.GameGetRequest) (*game.PaginatedResponse, error)
	/// Update a game by ID
	UpdateGame(context.Context, *game.GameUpdateRequest) (*game.StandardResponse, error)
	/// Trending games
	TrendingGame(context.Context, *game.TrendingGamesRequest) (*game.PaginatedResponse, error)
	/// Wait for queue updates
	StreamEvents(GameService_StreamEventsServer) error
	/// Stream events from the game
	WatchQueue(*game.Session, GameService_WatchQueueServer) error
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) JoinLeave(context.Context, *game.JoinLeaveGame) (*game.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLeave not implemented")
}
func (UnimplementedGameServiceServer) CreateSession(context.Context, *game.SessionCreate) (*game.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedGameServiceServer) GetSession(context.Context, *game.SessionGet) (*game.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedGameServiceServer) UpdateSession(context.Context, *game.SessionUpdate) (*game.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedGameServiceServer) DeleteSession(context.Context, *game.SessionDelete) (*game.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedGameServiceServer) CreateEntity(context.Context, *game.EntityCreateRequest) (*game.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedGameServiceServer) GetEntity(context.Context, *game.EntityGetRequest) (*game.PaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedGameServiceServer) UpdateEntity(context.Context, *game.EntityUpdateRequest) (*game.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedGameServiceServer) DeleteEntity(context.Context, *game.EntityDeleteRequest) (*game.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedGameServiceServer) CreateGame(context.Context, *game.GameCreateRequest) (*game.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedGameServiceServer) GetGame(context.Context, *game.GameGetRequest) (*game.PaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedGameServiceServer) UpdateGame(context.Context, *game.GameUpdateRequest) (*game.StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGame not implemented")
}
func (UnimplementedGameServiceServer) TrendingGame(context.Context, *game.TrendingGamesRequest) (*game.PaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrendingGame not implemented")
}
func (UnimplementedGameServiceServer) StreamEvents(GameService_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedGameServiceServer) WatchQueue(*game.Session, GameService_WatchQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchQueue not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_JoinLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.JoinLeaveGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).JoinLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/JoinLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).JoinLeave(ctx, req.(*game.JoinLeaveGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.SessionCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CreateSession(ctx, req.(*game.SessionCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.SessionGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetSession(ctx, req.(*game.SessionGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.SessionUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/UpdateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).UpdateSession(ctx, req.(*game.SessionUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.SessionDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).DeleteSession(ctx, req.(*game.SessionDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.EntityCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CreateEntity(ctx, req.(*game.EntityCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.EntityGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetEntity(ctx, req.(*game.EntityGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.EntityUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/UpdateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).UpdateEntity(ctx, req.(*game.EntityUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.EntityDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).DeleteEntity(ctx, req.(*game.EntityDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.GameCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CreateGame(ctx, req.(*game.GameCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.GameGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetGame(ctx, req.(*game.GameGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_UpdateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.GameUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).UpdateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/UpdateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).UpdateGame(ctx, req.(*game.GameUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_TrendingGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.TrendingGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).TrendingGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.api.common.GameService/TrendingGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).TrendingGame(ctx, req.(*game.TrendingGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServiceServer).StreamEvents(&gameServiceStreamEventsServer{stream})
}

type GameService_StreamEventsServer interface {
	Send(*game.GameEvent) error
	Recv() (*game.GameEvent, error)
	grpc.ServerStream
}

type gameServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *gameServiceStreamEventsServer) Send(m *game.GameEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServiceStreamEventsServer) Recv() (*game.GameEvent, error) {
	m := new(game.GameEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GameService_WatchQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(game.Session)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).WatchQueue(m, &gameServiceWatchQueueServer{stream})
}

type GameService_WatchQueueServer interface {
	Send(*game.Session) error
	grpc.ServerStream
}

type gameServiceWatchQueueServer struct {
	grpc.ServerStream
}

func (x *gameServiceWatchQueueServer) Send(m *game.Session) error {
	return x.ServerStream.SendMsg(m)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.api.common.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinLeave",
			Handler:    _GameService_JoinLeave_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _GameService_CreateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _GameService_GetSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _GameService_UpdateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _GameService_DeleteSession_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _GameService_CreateEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _GameService_GetEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _GameService_UpdateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _GameService_DeleteEntity_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _GameService_CreateGame_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _GameService_GetGame_Handler,
		},
		{
			MethodName: "UpdateGame",
			Handler:    _GameService_UpdateGame_Handler,
		},
		{
			MethodName: "TrendingGame",
			Handler:    _GameService_TrendingGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _GameService_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchQueue",
			Handler:       _GameService_WatchQueue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/api/common/game_service.proto",
}
