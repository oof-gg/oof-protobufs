// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package common

import (
	context "context"
	global "github.com/oof-gg/oof-protobufs/generated/go/v1/api/global"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlobalServiceClient is the client API for GlobalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalServiceClient interface {
	/// Stream events from the global service
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (GlobalService_StreamEventsClient, error)
}

type globalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalServiceClient(cc grpc.ClientConnInterface) GlobalServiceClient {
	return &globalServiceClient{cc}
}

func (c *globalServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (GlobalService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GlobalService_ServiceDesc.Streams[0], "/v1.api.common.GlobalService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalServiceStreamEventsClient{stream}
	return x, nil
}

type GlobalService_StreamEventsClient interface {
	Send(*global.GlobalEvent) error
	Recv() (*global.GlobalEvent, error)
	grpc.ClientStream
}

type globalServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *globalServiceStreamEventsClient) Send(m *global.GlobalEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *globalServiceStreamEventsClient) Recv() (*global.GlobalEvent, error) {
	m := new(global.GlobalEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GlobalServiceServer is the server API for GlobalService service.
// All implementations must embed UnimplementedGlobalServiceServer
// for forward compatibility
type GlobalServiceServer interface {
	/// Stream events from the global service
	StreamEvents(GlobalService_StreamEventsServer) error
	mustEmbedUnimplementedGlobalServiceServer()
}

// UnimplementedGlobalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalServiceServer struct {
}

func (UnimplementedGlobalServiceServer) StreamEvents(GlobalService_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedGlobalServiceServer) mustEmbedUnimplementedGlobalServiceServer() {}

// UnsafeGlobalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalServiceServer will
// result in compilation errors.
type UnsafeGlobalServiceServer interface {
	mustEmbedUnimplementedGlobalServiceServer()
}

func RegisterGlobalServiceServer(s grpc.ServiceRegistrar, srv GlobalServiceServer) {
	s.RegisterService(&GlobalService_ServiceDesc, srv)
}

func _GlobalService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GlobalServiceServer).StreamEvents(&globalServiceStreamEventsServer{stream})
}

type GlobalService_StreamEventsServer interface {
	Send(*global.GlobalEvent) error
	Recv() (*global.GlobalEvent, error)
	grpc.ServerStream
}

type globalServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *globalServiceStreamEventsServer) Send(m *global.GlobalEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *globalServiceStreamEventsServer) Recv() (*global.GlobalEvent, error) {
	m := new(global.GlobalEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GlobalService_ServiceDesc is the grpc.ServiceDesc for GlobalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.api.common.GlobalService",
	HandlerType: (*GlobalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _GlobalService_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/api/common/global_service.proto",
}
