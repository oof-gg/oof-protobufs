syntax = "proto3";

package v1.api.game;

import "v1/std/regions.proto";

/// Represents the state of a game session
enum GameState {
  STATE_CREATED = 0; /// The session has been created
  STATE_WAITING = 1; /// The session is waiting for players to join
  STATE_STARTED = 2; /// The session has started
  STATE_FINISHED = 3; /// The session has finished
  STATE_DELETED = 4; /// The session has been deleted
  STATE_PAUSED = 5; /// The session is paused
  STATE_QUEUED = 6; /// The session is queued
}

//TODO: Check if this is the best way to represent game attributes
/// Represents a game attribute
message GameAttribute {
  /// Value of the attribute
  oneof value {
    string string_value = 2;
    int32 int_value = 3;
    float float_value = 4;
    bool bool_value = 5;
  }
}

/// Represents a game session, can be used to store game state and attributes such as scores, times, players, and active in-game configurations.
message Session {
  string id = 1;
  string game_id = 2;
  /// Players in the session (can be used to store player state and attributes)
  /// Optional: This can be used to store player state and attributes, but not recommended for large player counts.
  repeated string player_ids = 3;
  /// Game state as defined by the GameState enum
  GameState state = 4;
  /// Game attributes as a map of string to GameAttribute
  map<string, GameAttribute> attributes = 5; // Game attributes
  optional v1.std.RegionEnum region = 6;
  optional string data = 7;
}

/// Represents a game session creation request
message SessionCreate {
  string game_id = 1;
  repeated string player_ids = 2;
  GameState state = 3;
  map<string, GameAttribute> attributes = 4;
  optional v1.std.RegionEnum region = 5;
  optional string data = 6;
}

message SessionUpdate {
  string id = 1;
  string game_id = 2;
  repeated string player_ids = 3;
  GameState state = 4;
  map<string, GameAttribute> attributes = 5;
  optional v1.std.RegionEnum region = 6;
  optional string data = 7;
}

/// Represents a game session update request
message SessionGet {
  optional string id = 1;
  optional string game_id = 2;
}

/// Represents a game session deletion request
message SessionDelete {
  string id = 1;
  string game_id = 2;
}

/// Represents a list of game sessions
message Sessions {
  repeated Session sessions = 1;
}

option go_package = "github.com/oof-gg/oof-protobufs/generated/go/v1/api/game";