syntax = "proto3";

package v1.api.player;

enum PlayerType {
  HUMAN = 0; // default
  AI = 1;
}

enum PlayerStatus {
  ACTIVE = 0; // default
  INACTIVE = 1;
}

message Player {
  string id = 1;
  string username = 2;
  optional string email = 3;
  optional string team = 4;
  int32 score = 5;
  PlayerType type = 6;
  PlayerStatus status = 7;
  optional string role = 8; // Role of the player in the game
}

message PlayerCreate {
  string username = 1;
  optional string email = 2;
  optional string team = 3;
  int32 score = 4;
  PlayerType type = 5;
  PlayerStatus status = 6;
  optional string role = 7;
}

message PlayerUpdate {
  string id = 1;
  optional string team = 4;
  optional PlayerType type = 6;
  optional PlayerStatus status = 7;
  optional string role = 8;
}

message PlayerGet {
  optional string id = 1;
}

message Status {
  // The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
  int32 code = 1;

  // A developer-facing error message, which should be in English. Any
  // user-facing error message should be localized and sent in the
  // [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
  string message = 2;

  // A list of messages that carry the error details.  There will be a
  // common set of message types for APIs to use.
  repeated string details = 3;
}

// Unify everything into one response.
message StandardResponse {
  // Status code (e.g., HTTP or custom).
  int32 code = 1;

  // This could be your success or error message.
  string message = 2;

  // If there's an error, you could store it here or just use google.rpc.Status directly.
  Status error = 3;

  // The actual payload.
  oneof data {
    // For single items.
    Player single_player = 4;
    Players players = 5;
  }
}

message Players {
  repeated Player players = 1;
}

option go_package = "github.com/oof-gg/oof-protobufs/generated/go/v1/api/player";