syntax = "proto3";

package v1.api.score;

import "google/protobuf/timestamp.proto";

message Score {
  string id = 1;
  string player_id = 2;
  string game_id = 3;
  string instance_id = 4; // optional - for game session tracking
  int64 value = 5;
  string score_type = 6; // "points", "time", "kills", etc.
  google.protobuf.Timestamp created_at = 7;
  map<string, string> metadata = 8; // flexible for game-specific data
}

message LeaderboardEntry {
  int32 rank = 1;
  Score score = 2;
  string player_name = 3; // denormalized for performance
}

message PlayerScoresRequest {
  string player_id = 1;
  string game_id = 2; // optional, if not provided, fetch all scores for the player
  int32 limit = 3; // maximum number of scores to return
  string cursor = 4; // for pagination
}

message PlayerScoresResponse {
  string player_id = 1;
  string game_id = 2; // if provided in request
  repeated Score scores = 3;
  int32 total_count = 4; // total number of scores available for the player
}

message Leaderboard {
  string game_id = 1;
  string score_type = 2;
  string time_period = 3; // "all_time", "daily", "weekly", "monthly"
  repeated LeaderboardEntry entries = 4;
  google.protobuf.Timestamp last_updated = 5;
}

message ScoreSubmission {
  string player_id = 1;
  string game_id = 2;
  string instance_id = 3;
  int64 value = 4;
  string score_type = 5;
  map<string, string> metadata = 6;
}

message LeaderboardRequest {
  string game_id = 1;
  string score_type = 2;
  string time_period = 3;
  int32 limit = 4;
  string cursor = 5;
}

message PlayerRankRequest {
  string player_id = 1;
  string game_id = 2; // optional, if not provided, fetch rank across all games
  string score_type = 3; // optional, if not provided, fetch overall rank
}

message PlayerRankResponse {
  string player_id = 1;
  string game_id = 2; // if provided in request
  string score_type = 3; // if provided in request
  int32 rank = 4; // player's rank in the leaderboard
  int64 score_value = 5; // player's score value
  int32 total_players = 6; // total number of players in the leaderboard for this game/score type
}

/// Metadata for paginated responses.
message PaginationMetadata {
    optional int32 page_size = 1;     // Number of items per page
    optional string prev_page_token = 2; // Token for the previous page
    optional string next_page_token = 3; // Token for the next page
}

message Status {
    // Status code (e.g., HTTP or custom).
    int32 code = 1;

    // This could be your success or error message.
    string message = 2;

    // If there's an error, you could store it here or just use google.rpc.Status directly.
    string details = 3; // Optional details about the error
}

/// A paginated response wrapper.
message PaginatedResponse {
    // Status code (e.g., HTTP or custom).
    int32 code = 1;

    // This could be your success or error message.
    string message = 2;

    // If there's an error, you could store it here or just use google.rpc.Status directly.
    Status error = 3;

    optional PaginationMetadata pagination = 4; // Pagination metadata

    // The actual payload.
    oneof data {
      // For single items.
      PlayerScoresResponse player_scores = 5;
      Leaderboard leaderboard = 6;
      LeaderboardEntry leaderboard_entry = 7;
      PlayerRankResponse player_rank = 8;
    }
}

/// Unify everything into one response.
message StandardResponse {
  // Status code (e.g., HTTP or custom).
  int32 code = 1;

  // This could be your success or error message.
  string message = 2;

  // If there's an error, you could store it here or just use google.rpc.Status directly.
  Status error = 3;

  // The actual payload.
  oneof data {
    // For single items.
    PlayerScoresResponse player_scores = 5;
    Leaderboard leaderboard = 6;
    LeaderboardEntry leaderboard_entry = 7;
    PlayerRankResponse player_rank = 8;
  }
}


option go_package = "github.com/oof-gg/oof-protobufs/generated/go/v1/api/score";