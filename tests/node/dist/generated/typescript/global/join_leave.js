"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: global/join_leave.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.JoinLeaveGame = exports.JoinLeaveGame_Action = exports.protobufPackage = void 0;
exports.joinLeaveGame_ActionFromJSON = joinLeaveGame_ActionFromJSON;
exports.joinLeaveGame_ActionToJSON = joinLeaveGame_ActionToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "global";
var JoinLeaveGame_Action;
(function (JoinLeaveGame_Action) {
    JoinLeaveGame_Action[JoinLeaveGame_Action["JOIN"] = 0] = "JOIN";
    JoinLeaveGame_Action[JoinLeaveGame_Action["LEAVE"] = 1] = "LEAVE";
    JoinLeaveGame_Action[JoinLeaveGame_Action["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(JoinLeaveGame_Action || (exports.JoinLeaveGame_Action = JoinLeaveGame_Action = {}));
function joinLeaveGame_ActionFromJSON(object) {
    switch (object) {
        case 0:
        case "JOIN":
            return JoinLeaveGame_Action.JOIN;
        case 1:
        case "LEAVE":
            return JoinLeaveGame_Action.LEAVE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return JoinLeaveGame_Action.UNRECOGNIZED;
    }
}
function joinLeaveGame_ActionToJSON(object) {
    switch (object) {
        case JoinLeaveGame_Action.JOIN:
            return "JOIN";
        case JoinLeaveGame_Action.LEAVE:
            return "LEAVE";
        case JoinLeaveGame_Action.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseJoinLeaveGame() {
    return { playerId: "", gameId: "", action: 0, teamId: undefined, sessionId: undefined };
}
exports.JoinLeaveGame = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerId !== "") {
            writer.uint32(10).string(message.playerId);
        }
        if (message.gameId !== "") {
            writer.uint32(18).string(message.gameId);
        }
        if (message.action !== 0) {
            writer.uint32(24).int32(message.action);
        }
        if (message.teamId !== undefined) {
            writer.uint32(34).string(message.teamId);
        }
        if (message.sessionId !== undefined) {
            writer.uint32(42).string(message.sessionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseJoinLeaveGame();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.teamId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
            action: isSet(object.action) ? joinLeaveGame_ActionFromJSON(object.action) : 0,
            teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : undefined,
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerId !== "") {
            obj.playerId = message.playerId;
        }
        if (message.gameId !== "") {
            obj.gameId = message.gameId;
        }
        if (message.action !== 0) {
            obj.action = joinLeaveGame_ActionToJSON(message.action);
        }
        if (message.teamId !== undefined) {
            obj.teamId = message.teamId;
        }
        if (message.sessionId !== undefined) {
            obj.sessionId = message.sessionId;
        }
        return obj;
    },
    create(base) {
        return exports.JoinLeaveGame.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseJoinLeaveGame();
        message.playerId = (_a = object.playerId) !== null && _a !== void 0 ? _a : "";
        message.gameId = (_b = object.gameId) !== null && _b !== void 0 ? _b : "";
        message.action = (_c = object.action) !== null && _c !== void 0 ? _c : 0;
        message.teamId = (_d = object.teamId) !== null && _d !== void 0 ? _d : undefined;
        message.sessionId = (_e = object.sessionId) !== null && _e !== void 0 ? _e : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
