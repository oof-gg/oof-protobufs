"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: game/event.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameEvent = exports.GameEvent_EventType = exports.protobufPackage = void 0;
exports.gameEvent_EventTypeFromJSON = gameEvent_EventTypeFromJSON;
exports.gameEvent_EventTypeToJSON = gameEvent_EventTypeToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "game";
/** CUSTOM - Custom events */
var GameEvent_EventType;
(function (GameEvent_EventType) {
    GameEvent_EventType[GameEvent_EventType["CUSTOM"] = 0] = "CUSTOM";
    GameEvent_EventType[GameEvent_EventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GameEvent_EventType || (exports.GameEvent_EventType = GameEvent_EventType = {}));
function gameEvent_EventTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "CUSTOM":
            return GameEvent_EventType.CUSTOM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return GameEvent_EventType.UNRECOGNIZED;
    }
}
function gameEvent_EventTypeToJSON(object) {
    switch (object) {
        case GameEvent_EventType.CUSTOM:
            return "CUSTOM";
        case GameEvent_EventType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseGameEvent() {
    return {
        id: "",
        eventName: "",
        timestamp: 0,
        gameId: undefined,
        playerId: undefined,
        sessionId: undefined,
        teamId: undefined,
        data: undefined,
        type: 0,
    };
}
exports.GameEvent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.eventName !== "") {
            writer.uint32(18).string(message.eventName);
        }
        if (message.timestamp !== 0) {
            writer.uint32(24).int64(message.timestamp);
        }
        if (message.gameId !== undefined) {
            writer.uint32(34).string(message.gameId);
        }
        if (message.playerId !== undefined) {
            writer.uint32(42).string(message.playerId);
        }
        if (message.sessionId !== undefined) {
            writer.uint32(58).string(message.sessionId);
        }
        if (message.teamId !== undefined) {
            writer.uint32(66).string(message.teamId);
        }
        if (message.data !== undefined) {
            writer.uint32(74).string(message.data);
        }
        if (message.type !== 0) {
            writer.uint32(80).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGameEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.eventName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp = longToNumber(reader.int64());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.gameId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.playerId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.sessionId = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.teamId = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            eventName: isSet(object.eventName) ? globalThis.String(object.eventName) : "",
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
            gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : undefined,
            playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : undefined,
            sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : undefined,
            teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : undefined,
            data: isSet(object.data) ? globalThis.String(object.data) : undefined,
            type: isSet(object.type) ? gameEvent_EventTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.eventName !== "") {
            obj.eventName = message.eventName;
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        if (message.gameId !== undefined) {
            obj.gameId = message.gameId;
        }
        if (message.playerId !== undefined) {
            obj.playerId = message.playerId;
        }
        if (message.sessionId !== undefined) {
            obj.sessionId = message.sessionId;
        }
        if (message.teamId !== undefined) {
            obj.teamId = message.teamId;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        if (message.type !== 0) {
            obj.type = gameEvent_EventTypeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.GameEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseGameEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.eventName = (_b = object.eventName) !== null && _b !== void 0 ? _b : "";
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : 0;
        message.gameId = (_d = object.gameId) !== null && _d !== void 0 ? _d : undefined;
        message.playerId = (_e = object.playerId) !== null && _e !== void 0 ? _e : undefined;
        message.sessionId = (_f = object.sessionId) !== null && _f !== void 0 ? _f : undefined;
        message.teamId = (_g = object.teamId) !== null && _g !== void 0 ? _g : undefined;
        message.data = (_h = object.data) !== null && _h !== void 0 ? _h : undefined;
        message.type = (_j = object.type) !== null && _j !== void 0 ? _j : 0;
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
